#!/usr/bin/env python3
"""
Komplett Rakt√°rkezel√©si Modul Teszt
Demonstr√°lja a bev√©t, kiv√©t, lelt√°r √©s minimumk√©szlet riaszt√°s funkci√≥kat
kett≈ës k√∂nyvel√©s elvvel
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from decimal import Decimal
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.models.inventory import Warehouse, InventoryItem, StockMovement
from app.models.tickets import Part, WorkOrder
from app.models.organization import Gate, Site, Building, Client
from app.services.inventory_service import InventoryService

def print_header(title: str):
    """Print formatted header"""
    print(f"\n{'='*80}")
    print(f"üè≠ {title}")
    print(f"{'='*80}")

def print_section(title: str):
    """Print formatted section"""
    print(f"\nüìã {title}")
    print("-" * 60)

def create_test_data(db: Session) -> dict:
    """Create test data for inventory demonstration"""
    
    print_section("Teszt adatok l√©trehoz√°sa")
    
    # Create client first
    client = Client(
        name="Teszt √úgyf√©l Kft.",
        display_name="Teszt √úgyf√©l", 
        type="commercial",
        address_line_1="Budapest, V√°ci √∫t 123.",
        is_active=True,
        org_id=1,
        organization_id=1
    )
    db.add(client)
    db.flush()
    
    # Create site
    site = Site(
        client_id=client.id,
        name="Budapest teszt telephely",
        display_name="Budapest telephely",
        site_code="BUD01", 
        address_line_1="Budapest, V√°ci √∫t 123.",
        is_active=True,
        org_id=1
    )
    db.add(site)
    db.flush()
    
    # Create building
    building = Building(
        site_id=site.id,
        name="F≈ë √©p√ºlet",
        display_name="F≈ë √©p√ºlet",
        building_code="MAIN",
        building_type="office",
        is_active=True,
        org_id=1
    )
    db.add(building)
    db.flush()
    
    # Create gate for work orders
    gate = Gate(
        building_id=building.id,
        name="Teszt gar√°zskapu",
        gate_code="GATE01",
        gate_type="sliding",  # Valid type: swing, sliding, barrier, bollard, turnstile
        manufacturer="Test Mfg",
        model="TM-2024",
        status="operational",
        is_active=True,
        org_id=1
    )
    db.add(gate)
    db.flush()
    
    # Create warehouse (org_id=1 for test)
    warehouse = Warehouse(
        name="F≈ë Rakt√°r",
        code="MAIN01",
        description="F≈ërakt√°r Budapest",
        warehouse_type="main",
        address_line_1="Budapest, V√°ci √∫t 123.",
        is_active=True,
        org_id=1  # Test organization
    )
    db.add(warehouse)
    db.flush()
    
    # Create parts
    parts = []
    part_data = [
        ("SERVO001", "Szerv√≥ motor SM-240V", 15000, 5, 20, 10),
        ("COND001", "Biztons√°gi kondenz√°tor 4ŒºF", 2500, 10, 50, 25),
        ("SWITCH001", "V√©gel√°ll√°s kapcsol√≥", 3500, 3, 15, 8),
        ("REMOTE001", "T√°vir√°ny√≠t√≥ 433MHz", 8500, 2, 10, 5),
        ("CABLE001", "Vez√©rl≈ë k√°bel 5m", 1200, 20, 100, 50)
    ]
    
    for part_code, part_name, unit_cost, min_stock, max_stock, reorder_qty in part_data:
        part = Part(
            part_number=part_code,
            name=part_name,
            description=f"{part_name} - Gar√°zskapu alkatr√©sz",
            category="electronics" if "motor" in part_name.lower() or "kondenz√°tor" in part_name.lower() else "hardware",
            unit_of_measure="piece",
            standard_cost=Decimal(str(unit_cost)),
            minimum_stock_level=min_stock,
            maximum_stock_level=max_stock,
            reorder_quantity=reorder_qty,
            is_active=True,
            org_id=1  # Test organization
        )
        db.add(part)
        db.flush()
        parts.append(part)
        
        # Create inventory item
        inventory_item = InventoryItem(
            warehouse_id=warehouse.id,
            part_id=part.id,
            location_code=f"A{len(parts):02d}",
            quantity_on_hand=Decimal('0'),
            quantity_available=Decimal('0'),
            minimum_stock=Decimal(str(min_stock)),
            maximum_stock=Decimal(str(max_stock)),
            reorder_quantity=Decimal(str(reorder_qty)),
            unit_cost=Decimal(str(unit_cost)),
            is_active=True,
            org_id=1  # Test organization
        )
        db.add(inventory_item)
    
    # Create work order for testing part usage
    work_order = WorkOrder(
        gate_id=gate.id,
        work_order_number="WO-2024-TEST001",
        title="Gar√°zskapu jav√≠t√°s teszt",
        description="Szerv√≥ motor √©s kondenz√°tor csere",
        work_type="repair",
        work_category="motor_replacement", 
        priority="medium",
        status="in_progress",
        org_id=1  # Test organization
    )
    db.add(work_order)
    
    db.commit()
    
    print(f"‚úÖ √úgyf√©l l√©trehozva: {client.name}")
    print(f"‚úÖ Telephely l√©trehozva: {site.name} ({site.site_code})")
    print(f"‚úÖ √âp√ºlet l√©trehozva: {building.name} ({building.building_code})")
    print(f"‚úÖ Gar√°zskapu l√©trehozva: {gate.name} ({gate.gate_code})")
    print(f"‚úÖ Rakt√°r l√©trehozva: {warehouse.name} ({warehouse.code})")
    print(f"‚úÖ {len(parts)} alkatr√©sz l√©trehozva")
    print(f"‚úÖ {len(parts)} k√©szlet t√©tel l√©trehozva")
    print(f"‚úÖ Munkalap l√©trehozva: {work_order.work_order_number}")
    
    return {
        'client': client,
        'site': site,
        'building': building,
        'gate': gate,
        'warehouse': warehouse,
        'parts': parts,
        'work_order': work_order
    }

def test_stock_receipt(inventory_service: InventoryService, test_data: dict):
    """Test stock receipt (bev√©telez√©s) functionality"""
    
    print_header("BEV√âTELEZ√âS TESZT - Kett≈ës k√∂nyvel√©s elvvel")
    
    warehouse = test_data['warehouse']
    parts = test_data['parts']
    
    # Get inventory items
    inventory_items = inventory_service.db.query(InventoryItem)\
        .filter(InventoryItem.warehouse_id == warehouse.id).all()
    
    receipt_data = [
        (0, Decimal('50'), Decimal('15000')),  # Szerv√≥ motor
        (1, Decimal('100'), Decimal('2500')),  # Kondenz√°tor 
        (2, Decimal('25'), Decimal('3500')),   # V√©gel√°ll√°s kapcsol√≥
        (3, Decimal('15'), Decimal('8500')),   # T√°vir√°ny√≠t√≥
        (4, Decimal('200'), Decimal('1200'))   # K√°bel
    ]
    
    print(f"üì¶ Bev√©telez√©s {len(receipt_data)} t√©tel...")
    
    movements = []
    for idx, (part_idx, quantity, unit_cost) in enumerate(receipt_data):
        item = inventory_items[part_idx]
        part = parts[part_idx]
        
        print(f"\nüîÑ Bev√©telez√©s {idx + 1}: {part.name}")
        print(f"   Mennyis√©g: {quantity} db")
        print(f"   Egys√©g√°r: {unit_cost:,} Ft")
        print(f"   √ñssz√©rt√©k: {quantity * unit_cost:,} Ft")
        
        movement = inventory_service.receive_stock(
            inventory_item_id=item.id,
            quantity=quantity,
            unit_cost=unit_cost,
            reference_type="purchase_order",
            notes=f"Teszt bev√©telez√©s - {part.name}"
        )
        movements.append(movement)
        
        # Show updated inventory
        inventory_service.db.refresh(item)
        print(f"   üìä √öj k√©szletszint: {item.quantity_on_hand} db")
        print(f"   üí∞ √Åtlag√°r: {item.average_cost:,.2f} Ft")
        print(f"   üìà St√°tusz: {item.stock_status}")
    
    print(f"\n‚úÖ {len(movements)} bev√©telez√©s sikeres")
    return movements

def test_stock_issue(inventory_service: InventoryService, test_data: dict):
    """Test stock issue (kiad√°s) functionality"""
    
    print_header("KIAD√ÅS TESZT - Munkalap alkatr√©szfelhaszn√°l√°s")
    
    warehouse = test_data['warehouse']
    parts = test_data['parts']
    work_order = test_data['work_order']
    
    # Get inventory items
    inventory_items = inventory_service.db.query(InventoryItem)\
        .filter(InventoryItem.warehouse_id == warehouse.id).all()
    
    issue_data = [
        (0, Decimal('2')),   # Szerv√≥ motor - 2 db
        (1, Decimal('4')),   # Kondenz√°tor - 4 db  
        (2, Decimal('3')),   # V√©gel√°ll√°s kapcsol√≥ - 3 db
        (4, Decimal('10'))   # K√°bel - 10 db
    ]
    
    print(f"üì§ Kiad√°s munkalapra: {work_order.work_order_number}")
    
    movements = []
    total_cost = Decimal('0')
    
    for part_idx, quantity in issue_data:
        item = inventory_items[part_idx]
        part = parts[part_idx]
        
        print(f"\nüîÑ Kiad√°s: {part.name}")
        print(f"   Kiadott mennyis√©g: {quantity} db")
        print(f"   K√©szlet el≈ëtte: {item.quantity_available} db")
        
        movement = inventory_service.issue_stock(
            inventory_item_id=item.id,
            quantity=quantity,
            work_order_id=work_order.id,
            notes=f"Felhaszn√°l√°s munkalapra - {work_order.work_order_number}"
        )
        movements.append(movement)
        
        # Calculate cost
        if movement.total_cost:
            total_cost += movement.total_cost
            print(f"   üí∞ Kiad√°s √©rt√©ke: {movement.total_cost:,.2f} Ft")
        
        # Show updated inventory
        inventory_service.db.refresh(item)
        print(f"   üìä K√©szlet ut√°na: {item.quantity_available} db")
        print(f"   üìà St√°tusz: {item.stock_status}")
    
    print(f"\n‚úÖ {len(movements)} kiad√°s sikeres")
    print(f"üí∞ √ñsszk√∂lts√©g: {total_cost:,.2f} Ft")
    return movements

def test_stock_adjustment(inventory_service: InventoryService, test_data: dict):
    """Test stock adjustment (lelt√°r) functionality"""
    
    print_header("LELT√ÅRI KORREKCI√ì TESZT")
    
    warehouse = test_data['warehouse']
    parts = test_data['parts']
    
    # Get inventory items  
    inventory_items = inventory_service.db.query(InventoryItem)\
        .filter(InventoryItem.warehouse_id == warehouse.id).all()
    
    # Simulate inventory count differences
    adjustments = [
        (2, Decimal('20')),  # V√©gel√°ll√°s kapcsol√≥ - tal√°lt 2 db-ot t√∂bb
        (3, Decimal('13')),  # T√°vir√°ny√≠t√≥ - hi√°nyzik 2 db
        (4, Decimal('185'))  # K√°bel - hi√°nyzik 5 db
    ]
    
    print("üìä Fizikai lelt√°r eredm√©nyei:")
    
    movements = []
    for part_idx, counted_quantity in adjustments:
        item = inventory_items[part_idx]
        part = parts[part_idx]
        
        current_qty = item.quantity_on_hand
        difference = counted_quantity - current_qty
        
        print(f"\nüîç Lelt√°r: {part.name}")
        print(f"   K√∂nyv szerinti k√©szlet: {current_qty} db")
        print(f"   Fizikai lelt√°r: {counted_quantity} db")
        print(f"   Elt√©r√©s: {difference:+} db")
        
        if difference != 0:
            reason = "Fizikai lelt√°r elt√©r√©se"
            if difference > 0:
                reason += " - T√∂bblet tal√°lt"
            else:
                reason += " - Hi√°ny felt√°rva"
            
            movement = inventory_service.adjust_stock(
                inventory_item_id=item.id,
                new_quantity=counted_quantity,
                reason=reason,
                notes=f"Lelt√°r d√°tum: {datetime.now().strftime('%Y-%m-%d')}"
            )
            movements.append(movement)
            
            # Show updated inventory
            inventory_service.db.refresh(item)
            print(f"   ‚úÖ Korrig√°lt k√©szlet: {item.quantity_on_hand} db")
            print(f"   üìà √öj st√°tusz: {item.stock_status}")
        else:
            print(f"   ‚úÖ Nincs elt√©r√©s - korrekci√≥ nem sz√ºks√©ges")
    
    print(f"\n‚úÖ {len(movements)} lelt√°ri korrekci√≥ v√©grehajtva")
    return movements

def test_minimum_stock_alerts(inventory_service: InventoryService):
    """Test minimum stock alert system"""
    
    print_header("MINIMUMK√âSZLET RIASZT√ÅS RENDSZER")
    
    # Generate comprehensive alerts
    alerts = inventory_service.generate_stock_alerts()
    
    print_section("Riaszt√°sok √∂sszefoglal√°sa")
    summary = alerts['summary']
    print(f"üìä √ñsszes riaszt√°s: {summary['total_alerts']}")
    print(f"üö® Kritikus riaszt√°sok: {summary['critical_alerts']}")  
    print(f"‚ö†Ô∏è Magas priorit√°s√∫: {summary['high_alerts']}")
    print(f"üí° K√∂zepes priorit√°s√∫: {summary['medium_alerts']}")
    print(f"üì¶ T√∫lrakt√°roz√°s: {summary['overstock_items']}")
    print(f"üêå Lassan forg√≥: {summary['slow_moving_items']}")
    
    # Show minimum stock alerts
    if alerts['minimum_stock_alerts']:
        print_section("Minimumk√©szlet Riaszt√°sok")
        for alert in alerts['minimum_stock_alerts']:
            print(f"\nüö® {alert['alert_level']} - {alert['part_name']} ({alert['part_code']})")
            print(f"   üìç Rakt√°r: {alert['warehouse_name']}")
            print(f"   üìä Jelenlegi k√©szlet: {alert['current_stock']} db")
            print(f"   üìâ Minimum k√©szlet: {alert['minimum_stock']} db")
            print(f"   üìà Hi√°ny: {alert['shortage']} db ({alert['shortage_percentage']:.1f}%)")
            
            if alert['suggested_order_quantity']:
                print(f"   üí° Javasolt rendel√©s: {alert['suggested_order_quantity']} db")
            
            if alert['days_since_last_movement']:
                print(f"   üìÖ Utols√≥ mozg√°s: {alert['days_since_last_movement']} napja")
    
    # Show overstock alerts
    if alerts['overstock_alerts']:
        print_section("T√∫lrakt√°roz√°si Riaszt√°sok")
        for alert in alerts['overstock_alerts']:
            print(f"\nüì¶ T√öLRAKT√ÅR - {alert['part_name']} ({alert['part_code']})")
            print(f"   üìç Rakt√°r: {alert['warehouse_code']}")
            print(f"   üìä Jelenlegi k√©szlet: {alert['current_stock']} db")
            print(f"   üìà Maximum k√©szlet: {alert['maximum_stock']} db")
            print(f"   üìâ T√∂bblet: {alert['excess_quantity']} db ({alert['excess_percentage']:.1f}%)")
            print(f"   üí∞ Felesleges √©rt√©k: {alert['total_value']:,.2f} Ft")
    
    return alerts

def test_double_entry_validation(inventory_service: InventoryService):
    """Test double-entry bookkeeping validation"""
    
    print_header("KETT≈êS K√ñNYVEL√âS VALID√ÅCI√ì")
    
    validation = inventory_service.validate_double_entry_balance()
    
    print("üìä K√∂nyvviteli egyenleg ellen≈ërz√©se:")
    print(f"   üí∞ √ñsszes tartozik (debit): {validation['total_debits']:,.3f} db")
    print(f"   üí∏ √ñsszes k√∂vetel (credit): {validation['total_credits']:,.3f} db")
    print(f"   üßÆ Sz√°m√≠tott egyenleg: {validation['calculated_balance']:,.3f} db")
    print(f"   üì¶ T√©nyleges k√©szlet: {validation['actual_stock']:,.3f} db")
    print(f"   üìä Elt√©r√©s: {validation['variance']:,.3f} db")
    print(f"   ‚úÖ Egyenleg rendben: {'IG' if validation['is_balanced'] else 'NEM'}")
    
    if validation['is_balanced']:
        print("\nüéâ A kett≈ës k√∂nyvel√©si egyenleg helyes!")
        print("   Minden bev√©telez√©s √©s kiad√°s megfelel≈ëen r√∂gz√≠tett")
    else:
        print(f"\n‚ö†Ô∏è Egyenleg hiba √©szlelhet≈ë!")
        print(f"   Ellen≈ërizni kell a {abs(validation['variance']):,.3f} db elt√©r√©st")
    
    return validation

def generate_inventory_reports(inventory_service: InventoryService, test_data: dict):
    """Generate comprehensive inventory reports"""
    
    print_header("RAKT√ÅRKEZEL√âSI RIPORTOK")
    
    warehouse = test_data['warehouse']
    
    # Current inventory report
    print_section("Jelenlegi K√©szletszintek")
    inventory_report = inventory_service.get_current_stock_report(warehouse_id=warehouse.id)
    
    total_items = len(inventory_report)
    total_value = sum(item['total_value'] or 0 for item in inventory_report)
    
    print(f"üì¶ √ñsszes t√©tel: {total_items}")
    print(f"üí∞ √ñsszes k√©szlet√©rt√©k: {total_value:,.2f} Ft")
    
    print(f"\n{'Alkatr√©sz':<30} {'K√©szlet':<10} {'Minimum':<10} {'√ârt√©k':<15} {'St√°tusz':<12}")
    print("-" * 85)
    
    for item in inventory_report:
        name = item['part_name'][:28] + ".." if len(item['part_name']) > 30 else item['part_name']
        value_str = f"{item['total_value'] or 0:,.0f} Ft"
        print(f"{name:<30} {item['quantity_on_hand']:<10.0f} {item['minimum_stock']:<10.0f} {value_str:<15} {item['stock_status']:<12}")
    
    # Stock movement report
    print_section("K√©szletmozg√°s Riport (Utols√≥ 24 √≥ra)")
    
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(hours=24)
    
    movement_report = inventory_service.get_stock_movement_report(
        start_date=start_date,
        end_date=end_date,
        warehouse_id=warehouse.id
    )
    
    if movement_report:
        print(f"üìä Mozg√°sok sz√°ma: {len(movement_report)}")
        
        print(f"\n{'Mozg√°s':<15} {'T√≠pus':<12} {'Alkatr√©sz':<25} {'Debit':<10} {'Credit':<10} {'√ârt√©k':<12}")
        print("-" * 95)
        
        for movement in movement_report[-10:]:  # Last 10 movements
            part_name = movement['part_name'][:23] + ".." if len(movement['part_name']) > 25 else movement['part_name']
            value_str = f"{movement['total_cost'] or 0:,.0f} Ft"
            print(f"{movement['movement_number']:<15} {movement['movement_type']:<12} {part_name:<25} "
                  f"{movement['debit_quantity']:<10.1f} {movement['credit_quantity']:<10.1f} {value_str:<12}")
    else:
        print("üì≠ Nincsenek mozg√°sok az elm√∫lt 24 √≥r√°ban")
    
    return {
        'inventory_report': inventory_report,
        'movement_report': movement_report,
        'total_value': total_value
    }

def main():
    """Run comprehensive inventory system test"""
    
    print_header("GarageReg Komplett Rakt√°rkezel√©si Rendszer Teszt")
    print("üéØ Feladat: Alap rakt√°r modul")
    print("üìã Kimenet: Bev√©t, kiv√©t, lelt√°r, minimumk√©szlet riaszt√°s")
    print("üîó Kapcsolat: Munkalap alkatr√©szfelhaszn√°l√°s")
    print("‚úÖ Elfogad√°s: Kett≈ës k√∂nyvel√©s elv (stock_movements), riport")
    
    # Initialize database session
    db = SessionLocal()
    inventory_service = InventoryService(db)
    
    try:
        # 1. Create test data
        test_data = create_test_data(db)
        
        # 2. Test stock receipt (bev√©telez√©s)
        receipt_movements = test_stock_receipt(inventory_service, test_data)
        
        # 3. Test stock issue (kiad√°s)  
        issue_movements = test_stock_issue(inventory_service, test_data)
        
        # 4. Test stock adjustment (lelt√°r)
        adjustment_movements = test_stock_adjustment(inventory_service, test_data)
        
        # 5. Test minimum stock alerts
        alerts = test_minimum_stock_alerts(inventory_service)
        
        # 6. Validate double-entry bookkeeping
        validation = test_double_entry_validation(inventory_service)
        
        # 7. Generate reports
        reports = generate_inventory_reports(inventory_service, test_data)
        
        # Final summary
        print_header("TESZT √ñSSZEFOGLAL√ÅS")
        
        total_movements = len(receipt_movements) + len(issue_movements) + len(adjustment_movements)
        
        print("‚úÖ Minden funkci√≥ sikeresen tesztelve:")
        print(f"   üì¶ Bev√©telez√©sek: {len(receipt_movements)} db")
        print(f"   üì§ Kiad√°sok: {len(issue_movements)} db") 
        print(f"   üìä Lelt√°ri korrekci√≥k: {len(adjustment_movements)} db")
        print(f"   üö® Riaszt√°sok: {alerts['summary']['total_alerts']} db")
        print(f"   üí∞ √ñsszes k√©szlet√©rt√©k: {reports['total_value']:,.2f} Ft")
        print(f"   ‚úÖ Kett≈ës k√∂nyvel√©s: {'Rendben' if validation['is_balanced'] else 'Hiba'}")
        
        print(f"\nüéâ RAKT√ÅRKEZEL√âSI MODUL SIKERESEN IMPLEMENT√ÅLVA!")
        print(f"üìã √ñsszesen {total_movements} rakt√°rmozg√°s r√∂gz√≠tve kett≈ës k√∂nyvel√©s elvvel")
        
    except Exception as e:
        print(f"\n‚ùå Hiba t√∂rt√©nt: {e}")
        db.rollback()
        raise
    
    finally:
        db.close()

if __name__ == "__main__":
    main()