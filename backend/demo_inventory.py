"""
Demo script for Inventory Management System with Double-Entry Bookkeeping
Bemutat√≥ script a kett≈ës k√∂nyvel√©s elv≈± rakt√°rkezel√©si rendszerhez
"""

import asyncio
from datetime import datetime, timedelta
from decimal import Decimal
from sqlalchemy.orm import Session

from app.database import SessionLocal
from app.services.inventory_service import InventoryService
from app.models.inventory import Warehouse, InventoryItem, StockMovement, StockAlert
from app.models.tickets import Part


def print_header(title: str):
    """Print formatted header"""
    print(f"\n{'='*60}")
    print(f"üè≠ {title}")
    print(f"{'='*60}")


def print_section(title: str):
    """Print formatted section header"""
    print(f"\nüìã {title}")
    print("-" * 50)


def demo_inventory_system():
    """Comprehensive demonstration of inventory management system"""
    
    print_header("GarageReg Rakt√°rkezel√©si Rendszer Bemutat√≥")
    print("Implement√°lt funkci√≥k:")
    print("‚úÖ Kett≈ës k√∂nyvel√©s elv (Debit/Credit)")
    print("‚úÖ Bev√©telez√©s, Kiad√°s, Lelt√°ri korrekci√≥")
    print("‚úÖ Minimumk√©szlet riaszt√°sok")
    print("‚úÖ Munkalap alkatr√©sz felhaszn√°l√°s integr√°ci√≥")
    print("‚úÖ K√©szletegyenleg √©s mozg√°s riportok")
    
    # Initialize database session
    db: Session = SessionLocal()
    inventory_service = InventoryService(db)
    
    try:
        # 1. Setup Demo Data
        print_section("1. Demo Adatok El≈ëk√©sz√≠t√©se")
        
        # Check if demo warehouse exists
        demo_warehouse = db.query(Warehouse).filter_by(code="DEMO_WH").first()
        if not demo_warehouse:
            demo_warehouse = Warehouse(
                code="DEMO_WH",
                name="Demo Rakt√°r",
                warehouse_type="main",
                is_active=True,
                description="Bemutat√≥ rakt√°r a tesztel√©shez"
            )
            db.add(demo_warehouse)
            db.commit()
        
        print(f"‚úÖ Rakt√°r: {demo_warehouse.name} ({demo_warehouse.code})")
        
        # Check if demo part exists
        demo_part = db.query(Part).filter_by(part_number="DEMO_PART_001").first()
        if not demo_part:
            demo_part = Part(
                part_number="DEMO_PART_001",
                name="Demo Alkatr√©sz",
                description="Bemutat√≥ alkatr√©sz a tesztel√©shez",
                category="Elektronika",
                manufacturer="Demo Gy√°rt√≥",
                unit_of_measure="db",
                is_active=True
            )
            db.add(demo_part)
            db.commit()
        
        print(f"‚úÖ Alkatr√©sz: {demo_part.name} ({demo_part.part_number})")
        
        # Check if inventory item exists
        demo_inventory = db.query(InventoryItem).filter_by(
            warehouse_id=demo_warehouse.id,
            part_id=demo_part.id
        ).first()
        
        if not demo_inventory:
            demo_inventory = InventoryItem(
                warehouse_id=demo_warehouse.id,
                part_id=demo_part.id,
                location_code="A-01-01",
                zone="A",
                quantity_on_hand=Decimal('0'),
                quantity_reserved=Decimal('0'),
                quantity_available=Decimal('0'),
                minimum_stock=Decimal('10'),
                reorder_point=Decimal('15'),
                reorder_quantity=Decimal('50'),
                is_active=True
            )
            db.add(demo_inventory)
            db.commit()
        
        print(f"‚úÖ K√©szlet t√©tel: {demo_inventory.location_code}")
        
        # 2. Stock Receipt Demo (Bev√©telez√©s)
        print_section("2. Bev√©telez√©s (Stock Receipt)")
        
        print("Bev√©telez√©s: 100 db @ 1500 Ft/db")
        receipt_movement = inventory_service.receive_stock(
            inventory_item_id=demo_inventory.id,
            quantity=Decimal('100'),
            unit_cost=Decimal('1500.00'),
            reference_type="purchase_order",
            reference_id=12345,
            notes="Kezdeti k√©szlet felt√∂lt√©s",
            user_id=1
        )
        
        print(f"‚úÖ Mozg√°s sz√°m: {receipt_movement.movement_number}")
        print(f"   Debit: {receipt_movement.debit_quantity} db")
        print(f"   Credit: {receipt_movement.credit_quantity} db")
        print(f"   K√©szlet ut√°n: {receipt_movement.quantity_after} db")
        
        # Refresh inventory item
        db.refresh(demo_inventory)
        print(f"   Jelenlegi k√©szlet: {demo_inventory.quantity_on_hand} db")
        print(f"   √Åtlag√°r: {demo_inventory.average_cost} Ft")
        print(f"   K√©szlet √©rt√©k: {demo_inventory.total_value} Ft")
        
        # 3. Stock Issue Demo (Kiad√°s)
        print_section("3. Kiad√°s (Stock Issue)")
        
        print("Kiad√°s: 25 db (munkalap felhaszn√°l√°s)")
        issue_movement, part_usage = inventory_service.issue_stock(
            inventory_item_id=demo_inventory.id,
            quantity=Decimal('25'),
            work_order_id=None,  # Demo purposes - no actual work order
            reference_type="manual_issue",
            notes="Demo kiad√°s tesztel√©s c√©lj√°b√≥l",
            user_id=1
        )
        
        print(f"‚úÖ Mozg√°s sz√°m: {issue_movement.movement_number}")
        print(f"   Debit: {issue_movement.debit_quantity} db")
        print(f"   Credit: {issue_movement.credit_quantity} db")
        print(f"   K√©szlet ut√°n: {issue_movement.quantity_after} db")
        
        # Refresh inventory item
        db.refresh(demo_inventory)
        print(f"   Jelenlegi k√©szlet: {demo_inventory.quantity_on_hand} db")
        
        # 4. Stock Adjustment Demo (Lelt√°ri korrekci√≥)
        print_section("4. Lelt√°ri Korrekci√≥ (Stock Adjustment)")
        
        print("Lelt√°r eredm√©nye: 70 db (5 db hi√°ny)")
        adjustment_movement = inventory_service.adjust_stock(
            inventory_item_id=demo_inventory.id,
            new_quantity=Decimal('70'),
            reason="Fizikai lelt√°r elt√©r√©se",
            notes="Cikksz√°ml√°l√°s sor√°n felt√°rt elt√©r√©s",
            user_id=1
        )
        
        print(f"‚úÖ Mozg√°s sz√°m: {adjustment_movement.movement_number}")
        print(f"   Debit: {adjustment_movement.debit_quantity} db")
        print(f"   Credit: {adjustment_movement.credit_quantity} db") 
        print(f"   K√©szlet ut√°n: {adjustment_movement.quantity_after} db")
        
        # 5. Low Stock Alert Demo (Minimumk√©szlet riaszt√°s)
        print_section("5. Minimumk√©szlet Riaszt√°s")
        
        # Issue more stock to trigger low stock alert
        print("Tov√°bbi kiad√°s: 65 db (minimumk√©szlet al√°)")
        low_stock_movement, _ = inventory_service.issue_stock(
            inventory_item_id=demo_inventory.id,
            quantity=Decimal('65'),
            reference_type="demo_issue",
            notes="Alacsony k√©szlet riaszt√°s tesztel√©se",
            user_id=1
        )
        
        # Check for alerts
        alerts = db.query(StockAlert).filter_by(
            inventory_item_id=demo_inventory.id,
            status="active"
        ).all()
        
        print(f"‚úÖ K√©szlet: {demo_inventory.quantity_on_hand} db")
        print(f"   Minimumk√©szlet: {demo_inventory.minimum_stock} db")
        print(f"   Akt√≠v riaszt√°sok: {len(alerts)}")
        
        for alert in alerts:
            print(f"   üö® {alert.alert_type.upper()}: {alert.message}")
            print(f"      S√∫lyoss√°g: {alert.severity}")
            print(f"      Akci√≥: {alert.action_required}")
        
        # 6. Stock Balance Report (K√©szletegyenleg riport)
        print_section("6. K√©szletegyenleg Riport")
        
        balance_report = inventory_service.get_stock_balance_report(
            warehouse_id=demo_warehouse.id,
            include_zero_stock=True
        )
        
        print("üìä K√©szletegyenleg:")
        for item in balance_report:
            print(f"   {item['part_code']}: {item['quantity_on_hand']} {item['part_name']}")
            print(f"      Rakt√°r: {item['warehouse_name']} ({item['location_code']})")
            print(f"      El√©rhet≈ë: {item['quantity_available']} | Min: {item['minimum_stock']}")
            print(f"      √ârt√©k: {item['total_value']} Ft")
        
        # 7. Stock Movement Report (K√©szletmozg√°s riport)
        print_section("7. K√©szletmozg√°s Riport")
        
        movement_report = inventory_service.get_stock_movement_report(
            start_date=datetime.now() - timedelta(days=1),
            end_date=datetime.now(),
            warehouse_id=demo_warehouse.id
        )
        
        print("üìà K√©szletmozg√°sok (utols√≥ 24 √≥ra):")
        print(f"{'Mozg√°s sz√°m':<15} {'T√≠pus':<12} {'Debit':<8} {'Credit':<8} {'Egyenleg':<10}")
        print("-" * 60)
        
        for movement in movement_report:
            print(f"{movement['movement_number']:<15} "
                  f"{movement['movement_type']:<12} "
                  f"{movement['debit_quantity']:<8} "
                  f"{movement['credit_quantity']:<8} "
                  f"{movement['quantity_after']:<10}")
        
        # 8. Double-Entry Validation (Kett≈ës k√∂nyvel√©s ellen≈ërz√©s)
        print_section("8. Kett≈ës K√∂nyvel√©s Ellen≈ërz√©s")
        
        validation = inventory_service.validate_double_entry_balance()
        
        print("üîç K√∂nyvviteli egyenleg ellen≈ërz√©s:")
        print(f"   √ñsszes Debit: {validation['total_debits']}")
        print(f"   √ñsszes Credit: {validation['total_credits']}")
        print(f"   Sz√°m√≠tott egyenleg: {validation['calculated_balance']}")
        print(f"   T√©nyleges k√©szlet: {validation['actual_stock']}")
        print(f"   Elt√©r√©s: {validation['variance']}")
        print(f"   Egyens√∫ly: {'‚úÖ RENDBEN' if validation['is_balanced'] else '‚ùå ELT√âR√âS'}")
        
        # 9. System Summary
        print_section("9. Rendszer √ñsszefoglal√°s")
        
        total_movements = db.query(StockMovement).count()
        total_alerts = db.query(StockAlert).filter_by(status="active").count()
        
        print("üéâ Rakt√°rkezel√©si rendszer √°llapot:")
        print(f"   üì¶ √ñsszes rakt√°r: {db.query(Warehouse).count()}")
        print(f"   üè∑Ô∏è  K√©szlet t√©telek: {db.query(InventoryItem).count()}")
        print(f"   üìä K√©szletmozg√°sok: {total_movements}")
        print(f"   üö® Akt√≠v riaszt√°sok: {total_alerts}")
        print(f"   ‚úÖ Kett≈ës k√∂nyvel√©s: {'Balanced' if validation['is_balanced'] else 'Unbalanced'}")
        
        print_header("Rakt√°rkezel√©si Rendszer Sikeresen Demonstr√°lva! üè≠")
        
    except Exception as e:
        print(f"‚ùå Hiba t√∂rt√©nt: {e}")
        db.rollback()
    
    finally:
        db.close()


if __name__ == "__main__":
    demo_inventory_system()