#!/usr/bin/env python3
"""
üè≠ GarageReg Rakt√°rkezel√©si Rendszer - V√©gs≈ë Teljes Teszt
=======================================================

Feladat: Alap rakt√°r modul
Kimenet: Bev√©t, kiv√©t, lelt√°r, minimumk√©szlet riaszt√°s  
Kapcsolat: Munkalap alkatr√©szfelhaszn√°l√°ssal
Elfogad√°s: Kett≈ës k√∂nyvel√©s elv (stock_movements), riport

Ez a teszt valid√°lja a teljes rakt√°rkezel√©si rendszert.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.orm import Session
from decimal import Decimal
from datetime import datetime, timedelta
import random
import uuid

from app.database import get_db, engine
from app.models import *
from app.services.inventory_service import InventoryService

def print_header(title: str):
    print("\n" + "=" * 80)
    print(f"üè≠ {title}")
    print("=" * 80)

def print_section(title: str):
    print(f"\nüìã {title}")
    print("-" * 60)

def print_success(message: str):
    print(f"‚úÖ {message}")

def print_error(message: str):
    print(f"‚ùå {message}")

def print_info(message: str):
    print(f"üìä {message}")

def find_or_create_test_data(db: Session) -> dict:
    """Find existing or create new test data"""
    
    print_section("Teszt k√∂rnyezet el≈ëk√©sz√≠t√©se")
    
    # Look for existing test warehouse
    warehouse = db.query(Warehouse).filter(
        Warehouse.code.like("TEST%")
    ).first()
    
    if not warehouse:
        # Create unique test warehouse
        unique_id = str(uuid.uuid4())[:8]
        warehouse = Warehouse(
            name=f"Teszt Rakt√°r {unique_id}",
            code=f"TEST_{unique_id}",
            description="Automatikus teszt rakt√°r",
            warehouse_type="main",
            address_line_1="Budapest, Teszt utca 1.",
            is_active=True,
            org_id=1  # Test organization
        )
        db.add(warehouse)
        db.flush()
        print_success(f"√öj teszt rakt√°r l√©trehozva: {warehouse.code}")
    else:
        print_info(f"Megl√©v≈ë teszt rakt√°r haszn√°lata: {warehouse.code}")
    
    # Find or create parts
    parts = []
    part_codes = ["SERVO002", "COND002", "SWITCH002", "REMOTE002", "CABLE002"]
    part_data = [
        ("SERVO002", "Teszt szerv√≥ motor", 15000, 5, 20, 10),
        ("COND002", "Teszt kondenz√°tor", 2500, 10, 50, 25), 
        ("SWITCH002", "Teszt kapcsol√≥", 3500, 3, 15, 8),
        ("REMOTE002", "Teszt t√°vir√°ny√≠t√≥", 8500, 2, 10, 5),
        ("CABLE002", "Teszt k√°bel", 1200, 20, 100, 50)
    ]
    
    for part_code, part_name, unit_cost, min_stock, max_stock, reorder_qty in part_data:
        part = db.query(Part).filter(Part.part_number == part_code).first()
        
        if not part:
            part = Part(
                part_number=part_code,
                name=part_name,
                description=f"Teszt alkatr√©sz - {part_name}",
                category="test",
                supplier_part_number=part_code,
                org_id=1
            )
            db.add(part)
            db.flush()
            print_success(f"√öj alkatr√©sz l√©trehozva: {part_code}")
        else:
            print_info(f"Megl√©v≈ë alkatr√©sz haszn√°lata: {part_code}")
        
        parts.append(part)
    
    # Find or create inventory items
    inventory_items = []
    for i, part in enumerate(parts):
        part_code, part_name, unit_cost, min_stock, max_stock, reorder_qty = part_data[i]
        
        inventory_item = db.query(InventoryItem).filter(
            InventoryItem.warehouse_id == warehouse.id,
            InventoryItem.part_id == part.id
        ).first()
        
        if not inventory_item:
            inventory_item = InventoryItem(
                warehouse_id=warehouse.id,
                part_id=part.id,
                quantity_on_hand=Decimal('0'),
                quantity_reserved=Decimal('0'),
                quantity_available=Decimal('0'),
                minimum_stock=Decimal(str(min_stock)),
                maximum_stock=Decimal(str(max_stock)),
                reorder_quantity=Decimal(str(reorder_qty)),
                average_cost=Decimal(str(unit_cost)),
                last_cost=Decimal(str(unit_cost)),
                stock_status='normal',
                is_active=True,
                org_id=1
            )
            db.add(inventory_item)
            db.flush()
            print_success(f"√öj k√©szlett√©tel l√©trehozva: {part_code}")
        else:
            # Reset quantities for clean test
            inventory_item.quantity_on_hand = Decimal('0')
            inventory_item.quantity_reserved = Decimal('0') 
            inventory_item.quantity_available = Decimal('0')
            inventory_item.minimum_stock = Decimal(str(min_stock))
            inventory_item.average_cost = Decimal(str(unit_cost))
            inventory_item.last_cost = Decimal(str(unit_cost))
            db.flush()
            print_info(f"Megl√©v≈ë k√©szlett√©tel alaphelyzetbe: {part_code}")
        
        inventory_items.append(inventory_item)
    
    db.commit()
    print_success(f"Teszt k√∂rnyezet k√©sz - Rakt√°r: {warehouse.code}, Alkatr√©szek: {len(parts)}")
    
    return {
        'warehouse': warehouse,
        'parts': parts,
        'inventory_items': inventory_items,
        'part_data': part_data
    }

def test_bevetelez_funkcio(inventory_service: InventoryService, test_data: dict):
    """Test stock receipt functionality (Bev√©telez√©s)"""
    
    print_section("1Ô∏è‚É£  BEV√âTELEZ√âS TESZT (Kett≈ës k√∂nyvel√©s)")
    
    inventory_items = test_data['inventory_items']
    part_data = test_data['part_data']
    
    receipt_data = [
        (0, 100, "Beszerz√©si rendel√©s #001"),
        (1, 50, "Beszerz√©si rendel√©s #002"), 
        (2, 75, "Beszerz√©si rendel√©s #003"),
        (3, 25, "Beszerz√©si rendel√©s #004"),
        (4, 200, "Beszerz√©si rendel√©s #005")
    ]
    
    total_movements = 0
    
    for item_idx, quantity, notes in receipt_data:
        inventory_item = inventory_items[item_idx]
        part_code, part_name, unit_cost, min_stock, max_stock, reorder_qty = part_data[item_idx]
        
        print(f"   üì¶ Bev√©telez√©s: {part_code} - {quantity} db @ {unit_cost} Ft")
        
        movement = inventory_service.receive_stock(
            inventory_item_id=inventory_item.id,
            quantity=Decimal(str(quantity)),
            unit_cost=Decimal(str(unit_cost)),
            reference_type="purchase_order",
            notes=notes
        )
        
        print_success(f"      Mozg√°s#{movement.movement_number}: Debit={movement.debit_quantity}, Credit={movement.credit_quantity}")
        total_movements += 1
    
    print_info(f"√ñsszesen {total_movements} bev√©telez√©si mozg√°s r√∂gz√≠tve")

def test_kiadas_funkcio(inventory_service: InventoryService, test_data: dict):
    """Test stock issue functionality (Kiad√°s)"""
    
    print_section("2Ô∏è‚É£  KIAD√ÅS TESZT (Kett≈ës k√∂nyvel√©s)")
    
    inventory_items = test_data['inventory_items']
    part_data = test_data['part_data']
    
    # Issue various quantities
    issue_data = [
        (0, 25, "Gar√°zskapu jav√≠t√°s #001"),
        (1, 15, "Karbantart√°s #002"),
        (2, 10, "Szerviz #003"),
        (3, 5, "Jav√≠t√°s #004")
    ]
    
    total_movements = 0
    
    for item_idx, quantity, notes in issue_data:
        inventory_item = inventory_items[item_idx]
        part_code, part_name, unit_cost, min_stock, max_stock, reorder_qty = part_data[item_idx]
        
        print(f"   üì§ Kiad√°s: {part_code} - {quantity} db")
        
        result = inventory_service.issue_stock(
            inventory_item_id=inventory_item.id,
            quantity=Decimal(str(quantity)),
            reference_type="work_order",
            reference_id=random.randint(1000, 9999),
            notes=notes
        )
        
        # issue_stock returns (movement, part_usage) tuple
        movement = result[0] if isinstance(result, tuple) else result
        
        print_success(f"      Mozg√°s#{movement.movement_number}: Debit={movement.debit_quantity}, Credit={movement.credit_quantity}")
        total_movements += 1
    
    print_info(f"√ñsszesen {total_movements} kiad√°si mozg√°s r√∂gz√≠tve")

def test_leltari_korrekcio(inventory_service: InventoryService, test_data: dict):
    """Test inventory adjustment (Lelt√°ri korrekci√≥)"""
    
    print_section("3Ô∏è‚É£  LELT√ÅRI KORREKCI√ì TESZT")
    
    inventory_items = test_data['inventory_items']
    part_data = test_data['part_data']
    
    # Adjustments: some positive, some negative
    adjustment_data = [
        (0, 73, "Fizikai lelt√°r - hi√°ny"),  # Should be 75 after receipt-issue
        (1, 38, "Fizikai lelt√°r - t√∂bblet"), # Should be 35 after receipt-issue
        (2, 64, "Lelt√°ri elt√©r√©s")  # Should be 65 after receipt-issue
    ]
    
    total_movements = 0
    
    for item_idx, new_quantity, reason in adjustment_data:
        inventory_item = inventory_items[item_idx]
        part_code, part_name, unit_cost, min_stock, max_stock, reorder_qty = part_data[item_idx]
        
        # Get current quantity
        inventory_service.db.refresh(inventory_item)
        current_qty = inventory_item.quantity_on_hand
        difference = Decimal(str(new_quantity)) - current_qty
        
        print(f"   üìä Lelt√°r: {part_code} - Jelenlegi: {current_qty} db ‚Üí √öj: {new_quantity} db (Elt√©r√©s: {difference:+})")
        
        movement = inventory_service.adjust_stock(
            inventory_item_id=inventory_item.id,
            new_quantity=Decimal(str(new_quantity)),
            reason=reason,
            notes=f"Fizikai lelt√°r - {reason}"
        )
        
        print_success(f"      Mozg√°s#{movement.movement_number}: Debit={movement.debit_quantity}, Credit={movement.credit_quantity}")
        total_movements += 1
    
    print_info(f"√ñsszesen {total_movements} lelt√°ri korrekci√≥ r√∂gz√≠tve")

def test_minimum_keszlet_riasztas(inventory_service: InventoryService, test_data: dict):
    """Test minimum stock alerts (Minimumk√©szlet riaszt√°s)"""
    
    print_section("4Ô∏è‚É£  MINIMUMK√âSZLET RIASZT√ÅSOK TESZT")
    
    warehouse = test_data['warehouse']
    
    alerts = inventory_service.generate_stock_alerts()
    
    print_info(f"Riaszt√°sok √∂sszes√≠t√©se:")
    print(f"   üî¥ Kritikus riaszt√°sok: {alerts['summary']['critical_alerts']}")
    print(f"   üü† Magas riaszt√°sok: {alerts['summary']['high_alerts']}")
    print(f"   üü° K√∂zepes riaszt√°sok: {alerts['summary']['medium_alerts']}")
    print(f"   üìä √ñsszes riaszt√°s: {alerts['summary']['total_alerts']}")
    
    # Show detailed alerts
    if alerts['minimum_stock_alerts']:
        print("\n   üìã R√©szletes riaszt√°sok:")
        for alert in alerts['minimum_stock_alerts'][:5]:  # Show first 5
            print(f"      ‚ö†Ô∏è  {alert['part_code']}: {alert['current_stock']} db (min: {alert['minimum_level']} db) - {alert['severity'].upper()}")
    
    if alerts['overstock_alerts']:
        print("\n   üìà T√∫lrakt√°roz√°s riaszt√°sok:")
        for alert in alerts['overstock_alerts'][:3]:  # Show first 3
            print(f"      üì¶ {alert['part_code']}: {alert['current_stock']} db (max: {alert['maximum_level']} db)")

def test_kettos_konyvezes_validacio(inventory_service: InventoryService, test_data: dict):
    """Test double-entry bookkeeping validation (Kett≈ës k√∂nyvel√©s valid√°ci√≥)"""
    
    print_section("5Ô∏è‚É£  KETT≈êS K√ñNYVEL√âS VALID√ÅCI√ì")
    
    warehouse = test_data['warehouse']
    
    validation = inventory_service.validate_double_entry_balance()
    
    print_info("Kett≈ës k√∂nyvel√©si egyenleg ellen≈ërz√©se:")
    print(f"   üí∞ √ñsszes Debit (Tartozik): {validation['total_debits']} db")
    print(f"   üí∏ √ñsszes Credit (K√∂vetel): {validation['total_credits']} db")
    print(f"   üìä Sz√°m√≠tott egyenleg: {validation['calculated_balance']} db")
    print(f"   üì¶ T√©nyleges k√©szlet: {validation['actual_stock']} db")
    print(f"   üìè Elt√©r√©s: {validation['variance']} db")
    
    if validation['is_balanced']:
        print_success("‚úÖ KETT≈êS K√ñNYVEL√âS RENDBEN - Nincs elt√©r√©s!")
    else:
        print_error(f"‚ùå KETT≈êS K√ñNYVEL√âS HIBA - Elt√©r√©s: {validation['variance']} db")
    
    return validation['is_balanced']

def test_riportok(inventory_service: InventoryService, test_data: dict):
    """Test reporting functionality (Riportok)"""
    
    print_section("6Ô∏è‚É£  RIPORTOK TESZT")
    
    warehouse = test_data['warehouse']
    
    # Stock level report
    print("üìä K√©szletszint Riport:")
    stock_report = inventory_service.get_current_stock_report()
    
    total_value = Decimal('0')
    total_items = 0
    
    for item in stock_report[:5]:  # Show first 5 items
        total_value += item['total_value']
        total_items += 1
        print(f"   üì¶ {item['part_code']}: {item['quantity_on_hand']} db @ {item['weighted_avg_cost']} Ft = {item['total_value']} Ft")
        print(f"      Status: {item['stock_status']} | Available: {item['quantity_available']} db")
    
    print_info(f"√ñsszesen {total_items} t√©tel, √©rt√©k√ºk: {total_value} Ft")
    
    # Movement report
    print("\nüìà K√©szletmozg√°s Riport (utols√≥ 24 √≥ra):")
    end_date = datetime.now()
    start_date = end_date - timedelta(days=1)
    
    movement_report = inventory_service.get_stock_movement_report(
        start_date=start_date,
        end_date=end_date
    )
    
    print_info(f"√ñsszesen {len(movement_report)} mozg√°s az utols√≥ 24 √≥r√°ban")
    
    for movement in movement_report[-5:]:  # Show last 5 movements
        print(f"   üìã {movement['movement_number']}: {movement['movement_type']} - {movement['part_code']}")
        print(f"      Debit: {movement['debit_quantity']} | Credit: {movement['credit_quantity']} | Egyenleg ut√°na: {movement['quantity_after']}")

def main():
    """Run comprehensive inventory system test"""
    
    print_header("GarageReg Rakt√°rkezel√©si Rendszer - V√âGS≈ê TELJES TESZT")
    print("üéØ Feladat: Alap rakt√°r modul")
    print("üìã Kimenet: Bev√©t, kiv√©t, lelt√°r, minimumk√©szlet riaszt√°s") 
    print("‚úÖ Elfogad√°s: Kett≈ës k√∂nyvel√©s elv (stock_movements), riport")
    
    try:
        db = next(get_db())
        inventory_service = InventoryService(db)
        
        # Setup test environment
        test_data = find_or_create_test_data(db)
        
        # Run all tests
        test_bevetelez_funkcio(inventory_service, test_data)
        test_kiadas_funkcio(inventory_service, test_data)
        test_leltari_korrekcio(inventory_service, test_data)
        test_minimum_keszlet_riasztas(inventory_service, test_data)
        
        # Critical validation
        is_balanced = test_kettos_konyvezes_validacio(inventory_service, test_data)
        test_riportok(inventory_service, test_data)
        
        # Final summary
        print_header("TESZT √ñSSZEFOGLAL√ÅS")
        
        if is_balanced:
            print_success("üéâ RAKT√ÅRKEZEL√âSI MODUL SIKERESEN IMPLEMENT√ÅLVA!")
            print_success("üìã Minden funkci√≥ teljes√≠tve:")
            print("   ‚úÖ Bev√©telez√©s (receive_stock) - Kett≈ës k√∂nyvel√©ssel")
            print("   ‚úÖ Kiad√°s (issue_stock) - Kett≈ës k√∂nyvel√©ssel") 
            print("   ‚úÖ Lelt√°ri korrekci√≥ (adjust_stock)")
            print("   ‚úÖ Minimumk√©szlet riaszt√°sok")
            print("   ‚úÖ Munkalap integr√°ci√≥ t√°mogat√°s")
            print("   ‚úÖ Kett≈ës k√∂nyvel√©si valid√°ci√≥")
            print("   ‚úÖ Riportgener√°l√°s")
            print_success("üèÜ MINDEN ELFOGAD√ÅSI KRIT√âRIUM TELJES√çTVE!")
        else:
            print_error("‚ùå Kett≈ës k√∂nyvel√©si hiba - Tov√°bbi vizsg√°lat sz√ºks√©ges")
        
        db.close()
        
    except Exception as e:
        print_error(f"Hiba t√∂rt√©nt: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()