#!/usr/bin/env python3
"""
üåç T√ñBBNYELV≈∞ UI √âS DOKUMENTUMOK - KOMPLETT IMPLEMENT√ÅCI√ì

Feladat: T√∂bbnyelv≈± UI √©s dokumentumok.
Kimenet: i18n f√°jlok, d√°tum/p√©nz form√°tum, PDF t√∂bbnyelv≈±.
Elfogad√°s: Nyelvv√°lt√≥, teljes admin UI lefedve.

Teljes implement√°ci√≥ magyar k√∂vetelm√©nyek alapj√°n.
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import locale
from enum import Enum

class SupportedLanguage(Enum):
    """T√°mogatott nyelvek."""
    HU = "hu"
    EN = "en" 
    DE = "de"

@dataclass
class LanguageConfig:
    """Nyelv konfigur√°ci√≥."""
    code: str
    name: str
    native_name: str
    flag: str
    direction: str
    date_format: str
    time_format: str
    currency: str
    currency_symbol: str

class MultilingualSystem:
    """T√∂bbnyelv≈± rendszer kezel√©se."""
    
    def __init__(self):
        self.languages = {
            SupportedLanguage.HU: LanguageConfig(
                code="hu",
                name="Hungarian",
                native_name="Magyar",
                flag="üá≠üá∫",
                direction="ltr",
                date_format="yyyy.MM.dd.",
                time_format="HH:mm",
                currency="HUF",
                currency_symbol="Ft"
            ),
            SupportedLanguage.EN: LanguageConfig(
                code="en",
                name="English", 
                native_name="English",
                flag="üá∫üá∏",
                direction="ltr",
                date_format="MM/dd/yyyy",
                time_format="h:mm a",
                currency="USD",
                currency_symbol="$"
            ),
            SupportedLanguage.DE: LanguageConfig(
                code="de",
                name="German",
                native_name="Deutsch",
                flag="üá©üá™",
                direction="ltr",
                date_format="dd.MM.yyyy",
                time_format="HH:mm",
                currency="EUR",
                currency_symbol="‚Ç¨"
            )
        }
        
        self.translations: Dict[str, Dict[str, Any]] = {}
        self.current_language = SupportedLanguage.HU
        
    def load_translations(self):
        """Bet√∂lti az √∂sszes ford√≠t√°st."""
        print("üìö Ford√≠t√°sok bet√∂lt√©se...")
        
        # Magyar ford√≠t√°sok (teljes admin UI)
        hungarian_translations = {
            "common": {
                "save": "Ment√©s",
                "cancel": "M√©gse",
                "delete": "T√∂rl√©s",
                "edit": "Szerkeszt√©s",
                "create": "L√©trehoz√°s",
                "update": "Friss√≠t√©s",
                "view": "Megtekint√©s",
                "search": "Keres√©s",
                "filter": "Sz≈±r√©s",
                "sort": "Rendez√©s",
                "loading": "Bet√∂lt√©s...",
                "error": "Hiba",
                "success": "Sikeres",
                "warning": "Figyelem",
                "info": "Inform√°ci√≥",
                "confirm": "Meger≈ës√≠t√©s",
                "yes": "Igen",
                "no": "Nem",
                "ok": "OK",
                "close": "Bez√°r√°s",
                "back": "Vissza",
                "next": "K√∂vetkez≈ë",
                "previous": "El≈ëz≈ë",
                "first": "Els≈ë",
                "last": "Utols√≥",
                "all": "√ñsszes",
                "none": "Nincs",
                "select": "Kiv√°laszt√°s",
                "required": "K√∂telez≈ë",
                "optional": "Opcion√°lis",
                "name": "N√©v",
                "description": "Le√≠r√°s",
                "status": "St√°tusz",
                "active": "Akt√≠v",
                "inactive": "Inakt√≠v",
                "enabled": "Enged√©lyezve",
                "disabled": "Letiltva",
                "date": "D√°tum",
                "time": "Id≈ë",
                "datetime": "D√°tum √©s id≈ë",
                "created": "L√©trehozva",
                "updated": "Friss√≠tve",
                "createdAt": "L√©trehoz√°s d√°tuma",
                "updatedAt": "Friss√≠t√©s d√°tuma",
                "actions": "M≈±veletek",
                "details": "R√©szletek",
                "settings": "Be√°ll√≠t√°sok",
                "preferences": "Preferenci√°k"
            },
            "navigation": {
                "dashboard": "Dashboard", 
                "organizations": "Szervezetek",
                "users": "Felhaszn√°l√≥k",
                "roles": "Szerepk√∂r√∂k",
                "permissions": "Jogosults√°gok",
                "clients": "√úgyfelek",
                "sites": "Telephelyek",
                "buildings": "√âp√ºletek",
                "gates": "Kapuk",
                "inspections": "Ellen≈ërz√©sek",
                "workOrders": "Munkarendel√©sek",
                "reports": "Jelent√©sek",
                "templates": "Sablonok",
                "documents": "Dokumentumok",
                "analytics": "Analitika",
                "audit": "Audit",
                "security": "Biztons√°g",
                "maintenance": "Karbantart√°s",
                "notifications": "√ârtes√≠t√©sek",
                "inventory": "K√©szlet",
                "calendar": "Napt√°r",
                "tasks": "Feladatok",
                "projects": "Projektek",
                "finance": "P√©nz√ºgy",
                "contracts": "Szerz≈ëd√©sek",
                "suppliers": "Besz√°ll√≠t√≥k"
            },
            "auth": {
                "login": {
                    "title": "Bejelentkez√©s",
                    "username": "Felhaszn√°l√≥n√©v",
                    "password": "Jelsz√≥",
                    "submit": "Bejelentkez√©s",
                    "forgotPassword": "Elfelejtett jelsz√≥?",
                    "rememberMe": "Eml√©kezzen r√°m"
                },
                "logout": "Kijelentkez√©s",
                "profile": "Profil",
                "changePassword": "Jelsz√≥ m√≥dos√≠t√°sa",
                "twoFactor": "K√©tfaktoros hiteles√≠t√©s"
            },
            "dashboard": {
                "title": "Dashboard",
                "welcome": "√údv√∂z√∂lj√ºk",
                "overview": "√Åttekint√©s",
                "stats": {
                    "totalClients": "√úgyfelek √∂sszesen",
                    "totalSites": "Telephelyek √∂sszesen", 
                    "totalGates": "Kapuk √∂sszesen",
                    "activeInspections": "Akt√≠v ellen≈ërz√©sek",
                    "pendingWorkOrders": "F√ºgg≈ëben l√©v≈ë munkarendel√©sek",
                    "overdueTasks": "Lej√°rt feladatok",
                    "upcomingInspections": "K√∂zelg≈ë ellen≈ërz√©sek",
                    "criticalIssues": "Kritikus probl√©m√°k"
                },
                "charts": {
                    "inspectionsByMonth": "Ellen≈ërz√©sek havi bont√°sban",
                    "gatesByType": "Kapuk t√≠pus szerint",
                    "workOrdersByStatus": "Munkarendel√©sek st√°tusz szerint"
                }
            },
            "clients": {
                "title": "√úgyfelek",
                "newClient": "√öj √ºgyf√©l",
                "editClient": "√úgyf√©l szerkeszt√©se",
                "clientDetails": "√úgyf√©l r√©szletei",
                "companyName": "C√©gn√©v",
                "contactPerson": "Kapcsolattart√≥",
                "email": "E-mail",
                "phone": "Telefon",
                "address": "C√≠m",
                "taxNumber": "Ad√≥sz√°m",
                "registrationNumber": "C√©gjegyz√©ksz√°m"
            },
            "gates": {
                "title": "Kapuk",
                "newGate": "√öj kapu",
                "editGate": "Kapu szerkeszt√©se",
                "gateDetails": "Kapu r√©szletei",
                "gateType": "Kapu t√≠pusa",
                "manufacturer": "Gy√°rt√≥",
                "model": "Modell",
                "serialNumber": "Sorozatsz√°m",
                "installationDate": "Telep√≠t√©s d√°tuma",
                "warrantyExpiry": "Garancia lej√°rata",
                "location": "Helysz√≠n",
                "status": "√Ållapot"
            },
            "inspections": {
                "title": "Ellen≈ërz√©sek",
                "newInspection": "√öj ellen≈ërz√©s",
                "editInspection": "Ellen≈ërz√©s szerkeszt√©se",
                "inspectionDetails": "Ellen≈ërz√©s r√©szletei",
                "inspector": "Ellen≈ër",
                "inspectionDate": "Ellen≈ërz√©s d√°tuma",
                "inspectionType": "Ellen≈ërz√©s t√≠pusa",
                "result": "Eredm√©ny",
                "findings": "Meg√°llap√≠t√°sok",
                "recommendations": "Aj√°nl√°sok",
                "nextInspection": "K√∂vetkez≈ë ellen≈ërz√©s",
                "certificate": "Tan√∫s√≠tv√°ny"
            },
            "pdf": {
                "header": {
                    "title": "GarageReg Dokumentum",
                    "company": "GarageReg Kft.",
                    "address": "1234 Budapest, P√©lda utca 12."
                },
                "footer": {
                    "generated": "Gener√°lva: {{date}} - {{system}}",
                    "page": "Oldal {{current}} / {{total}}"
                },
                "invoice": {
                    "title": "Sz√°mla",
                    "number": "Sz√°mlasz√°m: {{number}}",
                    "customer": "√úgyf√©l: {{name}}",
                    "issueDate": "Ki√°ll√≠t√°s d√°tuma: {{date}}",
                    "dueDate": "Esed√©kess√©g: {{date}}",
                    "total": "√ñsszesen: {{total}}",
                    "footer": "K√∂sz√∂nj√ºk a bizalm√°t!"
                },
                "report": {
                    "title": "Jelent√©s",
                    "period": "Id≈ëszak: {{from}} - {{to}}",
                    "summary": "√ñsszefoglal√≥",
                    "generated": "Gener√°lva: {{date}}"
                },
                "certificate": {
                    "title": "Tan√∫s√≠tv√°ny",
                    "gateInfo": "Kapu inform√°ci√≥",
                    "inspectionInfo": "Ellen≈ërz√©s inform√°ci√≥",
                    "result": "Eredm√©ny",
                    "validity": "√ârv√©nyess√©g"
                }
            },
            "forms": {
                "validation": {
                    "required": "Ez a mez≈ë k√∂telez≈ë",
                    "email": "√ârv√©nyes e-mail c√≠met adjon meg",
                    "minLength": "Minimum {{min}} karakter sz√ºks√©ges",
                    "maxLength": "Maximum {{max}} karakter enged√©lyezett",
                    "numeric": "Csak sz√°mokat tartalmazhat",
                    "phoneNumber": "√ârv√©nyes telefonsz√°mot adjon meg",
                    "date": "√ârv√©nyes d√°tumot adjon meg"
                }
            },
            "formats": {
                "currency": {
                    "symbol": "Ft",
                    "code": "HUF",
                    "format": "{{amount}} {{symbol}}",
                    "decimal": ",",
                    "thousand": " "
                },
                "date": {
                    "short": "yyyy.MM.dd.",
                    "medium": "yyyy. MMM dd.",
                    "long": "yyyy. MMMM dd.",
                    "full": "yyyy. MMMM dd., EEEE"
                },
                "time": {
                    "short": "HH:mm",
                    "medium": "HH:mm:ss",
                    "long": "HH:mm:ss z"
                },
                "number": {
                    "decimal": ",",
                    "thousand": " "
                }
            }
        }
        
        # Angol ford√≠t√°sok
        english_translations = {
            "common": {
                "save": "Save",
                "cancel": "Cancel",
                "delete": "Delete",
                "edit": "Edit",
                "create": "Create",
                "update": "Update",
                "view": "View",
                "search": "Search",
                "filter": "Filter",
                "sort": "Sort",
                "loading": "Loading...",
                "error": "Error",
                "success": "Success",
                "warning": "Warning",
                "info": "Information",
                "confirm": "Confirm",
                "yes": "Yes",
                "no": "No",
                "ok": "OK",
                "close": "Close",
                "back": "Back",
                "next": "Next",
                "previous": "Previous",
                "first": "First",
                "last": "Last",
                "all": "All",
                "none": "None",
                "select": "Select",
                "required": "Required",
                "optional": "Optional",
                "name": "Name",
                "description": "Description",
                "status": "Status",
                "active": "Active",
                "inactive": "Inactive",
                "enabled": "Enabled",
                "disabled": "Disabled",
                "date": "Date",
                "time": "Time",
                "datetime": "Date and Time",
                "created": "Created",
                "updated": "Updated",
                "createdAt": "Created At",
                "updatedAt": "Updated At",
                "actions": "Actions",
                "details": "Details",
                "settings": "Settings",
                "preferences": "Preferences"
            },
            "navigation": {
                "dashboard": "Dashboard",
                "organizations": "Organizations",
                "users": "Users",
                "roles": "Roles",
                "permissions": "Permissions",
                "clients": "Clients",
                "sites": "Sites",
                "buildings": "Buildings",
                "gates": "Gates",
                "inspections": "Inspections",
                "workOrders": "Work Orders",
                "reports": "Reports",
                "templates": "Templates",
                "documents": "Documents",
                "analytics": "Analytics",
                "audit": "Audit",
                "security": "Security",
                "maintenance": "Maintenance",
                "notifications": "Notifications",
                "inventory": "Inventory",
                "calendar": "Calendar",
                "tasks": "Tasks",
                "projects": "Projects",
                "finance": "Finance",
                "contracts": "Contracts",
                "suppliers": "Suppliers"
            },
            "auth": {
                "login": {
                    "title": "Sign In",
                    "username": "Username",
                    "password": "Password", 
                    "submit": "Sign In",
                    "forgotPassword": "Forgot password?",
                    "rememberMe": "Remember me"
                },
                "logout": "Sign Out",
                "profile": "Profile",
                "changePassword": "Change Password",
                "twoFactor": "Two-Factor Authentication"
            },
            "dashboard": {
                "title": "Dashboard",
                "welcome": "Welcome",
                "overview": "Overview",
                "stats": {
                    "totalClients": "Total Clients",
                    "totalSites": "Total Sites",
                    "totalGates": "Total Gates",
                    "activeInspections": "Active Inspections",
                    "pendingWorkOrders": "Pending Work Orders",
                    "overdueTasks": "Overdue Tasks",
                    "upcomingInspections": "Upcoming Inspections",
                    "criticalIssues": "Critical Issues"
                },
                "charts": {
                    "inspectionsByMonth": "Inspections by Month",
                    "gatesByType": "Gates by Type",
                    "workOrdersByStatus": "Work Orders by Status"
                }
            },
            "formats": {
                "currency": {
                    "symbol": "$",
                    "code": "USD",
                    "format": "{{symbol}}{{amount}}",
                    "decimal": ".",
                    "thousand": ","
                },
                "date": {
                    "short": "MM/dd/yyyy",
                    "medium": "MMM dd, yyyy",
                    "long": "MMMM dd, yyyy",
                    "full": "EEEE, MMMM dd, yyyy"
                },
                "time": {
                    "short": "h:mm a",
                    "medium": "h:mm:ss a",
                    "long": "h:mm:ss a z"
                },
                "number": {
                    "decimal": ".",
                    "thousand": ","
                }
            }
        }
        
        # N√©met ford√≠t√°sok
        german_translations = {
            "common": {
                "save": "Speichern",
                "cancel": "Abbrechen",
                "delete": "L√∂schen",
                "edit": "Bearbeiten",
                "create": "Erstellen",
                "update": "Aktualisieren",
                "view": "Anzeigen",
                "search": "Suchen",
                "filter": "Filter",
                "sort": "Sortieren",
                "loading": "L√§dt...",
                "error": "Fehler",
                "success": "Erfolgreich",
                "warning": "Warnung",
                "info": "Information",
                "confirm": "Best√§tigen",
                "yes": "Ja",
                "no": "Nein",
                "ok": "OK",
                "close": "Schlie√üen",
                "back": "Zur√ºck",
                "next": "Weiter",
                "previous": "Vorherige",
                "first": "Erste",
                "last": "Letzte",
                "all": "Alle",
                "none": "Keine",
                "select": "Ausw√§hlen",
                "required": "Erforderlich",
                "optional": "Optional",
                "name": "Name",
                "description": "Beschreibung",
                "status": "Status",
                "active": "Aktiv",
                "inactive": "Inaktiv",
                "enabled": "Aktiviert",
                "disabled": "Deaktiviert",
                "date": "Datum",
                "time": "Zeit",
                "datetime": "Datum und Zeit",
                "created": "Erstellt",
                "updated": "Aktualisiert",
                "createdAt": "Erstellt am",
                "updatedAt": "Aktualisiert am",
                "actions": "Aktionen",
                "details": "Details",
                "settings": "Einstellungen",
                "preferences": "Einstellungen"
            },
            "navigation": {
                "dashboard": "Dashboard",
                "organizations": "Organisationen",
                "users": "Benutzer",
                "roles": "Rollen",
                "permissions": "Berechtigungen",
                "clients": "Kunden",
                "sites": "Standorte",
                "buildings": "Geb√§ude",
                "gates": "Tore",
                "inspections": "Inspektionen",
                "workOrders": "Arbeitsauftr√§ge",
                "reports": "Berichte",
                "templates": "Vorlagen",
                "documents": "Dokumente",
                "analytics": "Analytik",
                "audit": "Audit",
                "security": "Sicherheit",
                "maintenance": "Wartung",
                "notifications": "Benachrichtigungen",
                "inventory": "Inventar",
                "calendar": "Kalender",
                "tasks": "Aufgaben",
                "projects": "Projekte",
                "finance": "Finanzen",
                "contracts": "Vertr√§ge",
                "suppliers": "Lieferanten"
            },
            "formats": {
                "currency": {
                    "symbol": "‚Ç¨",
                    "code": "EUR",
                    "format": "{{amount}} {{symbol}}",
                    "decimal": ",",
                    "thousand": "."
                },
                "date": {
                    "short": "dd.MM.yyyy",
                    "medium": "dd. MMM yyyy",
                    "long": "dd. MMMM yyyy",
                    "full": "EEEE, dd. MMMM yyyy"
                },
                "time": {
                    "short": "HH:mm",
                    "medium": "HH:mm:ss",
                    "long": "HH:mm:ss z"
                },
                "number": {
                    "decimal": ",",
                    "thousand": "."
                }
            }
        }
        
        self.translations = {
            "hu": hungarian_translations,
            "en": english_translations,
            "de": german_translations
        }
        
        print(f"‚úÖ {len(self.translations)} nyelv ford√≠t√°sa bet√∂ltve")
        
        # Ford√≠t√°sok ment√©se JSON f√°jlokba
        for lang_code, trans in self.translations.items():
            os.makedirs(f"web-admin-new/src/locales/{lang_code}", exist_ok=True)
            with open(f"web-admin-new/src/locales/{lang_code}/common.json", "w", encoding="utf-8") as f:
                json.dump(trans, f, ensure_ascii=False, indent=2)
        
        print("üìÅ i18n f√°jlok l√©trehozva: web-admin-new/src/locales/")

    def translate(self, key: str, lang: Optional[SupportedLanguage] = None, **params) -> str:
        """Ford√≠t√°s lek√©r√©se."""
        if lang is None:
            lang = self.current_language
            
        lang_code = lang.value
        translations = self.translations.get(lang_code, {})
        
        # Kulcs √∫tvonal felbont√°sa (pl. "common.save")
        keys = key.split('.')
        value = translations
        
        for k in keys:
            if isinstance(value, dict):
                value = value.get(k)
            else:
                value = None
                break
        
        if value is None:
            return key  # Fallback a kulcsra
        
        # Param√©ter helyettes√≠t√©s
        if isinstance(value, str) and params:
            for param_key, param_value in params.items():
                value = value.replace(f"{{{{{param_key}}}}}", str(param_value))
        
        return str(value)

    def format_date(self, date: datetime, lang: SupportedLanguage = None, format_type: str = "medium") -> str:
        """D√°tum form√°z√°sa nyelv szerint."""
        if lang is None:
            lang = self.current_language
            
        lang_config = self.languages[lang]
        
        # Egyszer≈± form√°z√°s (val√≥s implement√°ci√≥ban Babel vagy hasonl√≥ library)
        format_patterns = {
            "hu": {
                "short": "%Y.%m.%d.",
                "medium": "%Y. %b %d.",
                "long": "%Y. %B %d.",
                "full": "%Y. %B %d., %A"
            },
            "en": {
                "short": "%m/%d/%Y",
                "medium": "%b %d, %Y",
                "long": "%B %d, %Y", 
                "full": "%A, %B %d, %Y"
            },
            "de": {
                "short": "%d.%m.%Y",
                "medium": "%d. %b %Y",
                "long": "%d. %B %Y",
                "full": "%A, %d. %B %Y"
            }
        }
        
        pattern = format_patterns.get(lang.value, {}).get(format_type, "%Y-%m-%d")
        
        # Magyar h√≥napnevek
        if lang == SupportedLanguage.HU:
            hungarian_months = {
                "Jan": "jan", "Feb": "feb", "Mar": "m√°r", "Apr": "√°pr",
                "May": "m√°j", "Jun": "j√∫n", "Jul": "j√∫l", "Aug": "aug",
                "Sep": "szep", "Oct": "okt", "Nov": "nov", "Dec": "dec",
                "January": "janu√°r", "February": "febru√°r", "March": "m√°rcius",
                "April": "√°prilis", "May": "m√°jus", "June": "j√∫nius",
                "July": "j√∫lius", "August": "augusztus", "September": "szeptember", 
                "October": "okt√≥ber", "November": "november", "December": "december"
            }
            
            formatted = date.strftime(pattern)
            for en_month, hu_month in hungarian_months.items():
                formatted = formatted.replace(en_month, hu_month)
            return formatted
        
        return date.strftime(pattern)

    def format_currency(self, amount: float, lang: SupportedLanguage = None) -> str:
        """P√©nznem form√°z√°sa nyelv szerint."""
        if lang is None:
            lang = self.current_language
            
        lang_config = self.languages[lang]
        
        # Sz√°m form√°z√°sa
        if lang == SupportedLanguage.HU:
            # Magyar: 125 450,75 Ft
            formatted_amount = f"{amount:,.2f}".replace(",", " ").replace(".", ",")
            return f"{formatted_amount} {lang_config.currency_symbol}"
        elif lang == SupportedLanguage.EN:
            # Angol: $125,450.75
            return f"{lang_config.currency_symbol}{amount:,.2f}"
        elif lang == SupportedLanguage.DE:
            # N√©met: 125.450,75 ‚Ç¨
            formatted_amount = f"{amount:,.2f}".replace(",", ".").replace(".", ",")
            return f"{formatted_amount} {lang_config.currency_symbol}"
        
        return f"{amount:.2f} {lang_config.currency_symbol}"

    def format_number(self, number: float, lang: SupportedLanguage = None, precision: int = 2) -> str:
        """Sz√°m form√°z√°sa nyelv szerint."""
        if lang is None:
            lang = self.current_language
            
        lang_config = self.languages[lang]
        
        if lang == SupportedLanguage.HU:
            # Magyar: 1 234 567,89
            formatted = f"{number:,.{precision}f}".replace(",", " ").replace(".", ",")
        elif lang == SupportedLanguage.EN:
            # Angol: 1,234,567.89
            formatted = f"{number:,.{precision}f}"
        elif lang == SupportedLanguage.DE:
            # N√©met: 1.234.567,89
            formatted = f"{number:,.{precision}f}".replace(",", "X").replace(".", ",").replace("X", ".")
        else:
            formatted = f"{number:.{precision}f}"
        
        return formatted

class PDFMultilingualGenerator:
    """T√∂bbnyelv≈± PDF gener√°tor."""
    
    def __init__(self, multilingual_system: MultilingualSystem):
        self.ml_system = multilingual_system
        
    def generate_invoice(self, invoice_data: Dict[str, Any], lang: SupportedLanguage) -> Dict[str, Any]:
        """Sz√°mla gener√°l√°sa."""
        template = {
            "type": "invoice",
            "language": lang.value,
            "layout": "portrait",
            "margins": {"top": 60, "right": 40, "bottom": 60, "left": 40},
            "content": {
                "header": {
                    "title": self.ml_system.translate("pdf.header.title", lang),
                    "company": self.ml_system.translate("pdf.header.company", lang),
                    "address": self.ml_system.translate("pdf.header.address", lang)
                },
                "invoice": {
                    "title": self.ml_system.translate("pdf.invoice.title", lang),
                    "number": self.ml_system.translate("pdf.invoice.number", lang, 
                                                     number=invoice_data["invoice_number"]),
                    "customer": self.ml_system.translate("pdf.invoice.customer", lang,
                                                       name=invoice_data["customer_name"]),
                    "issue_date": self.ml_system.translate("pdf.invoice.issueDate", lang,
                                                         date=self.ml_system.format_date(
                                                             invoice_data["issue_date"], lang)),
                    "due_date": self.ml_system.translate("pdf.invoice.dueDate", lang,
                                                       date=self.ml_system.format_date(
                                                           invoice_data["due_date"], lang)),
                    "items": [
                        {
                            "description": item["description"],
                            "quantity": self.ml_system.format_number(item["quantity"], lang, 0),
                            "price": self.ml_system.format_currency(item["price"], lang),
                            "amount": self.ml_system.format_currency(item["amount"], lang)
                        }
                        for item in invoice_data["items"]
                    ],
                    "total": self.ml_system.translate("pdf.invoice.total", lang,
                                                    total=self.ml_system.format_currency(
                                                        invoice_data["total"], lang))
                },
                "footer": {
                    "text": self.ml_system.translate("pdf.invoice.footer", lang),
                    "generated": self.ml_system.translate("pdf.footer.generated", lang,
                                                        date=self.ml_system.format_date(datetime.now(), lang),
                                                        system="GarageReg")
                }
            }
        }
        
        return template
        
    def generate_inspection_certificate(self, inspection_data: Dict[str, Any], lang: SupportedLanguage) -> Dict[str, Any]:
        """Ellen≈ërz√©si tan√∫s√≠tv√°ny gener√°l√°sa."""
        template = {
            "type": "certificate",
            "language": lang.value,
            "layout": "portrait",
            "margins": {"top": 50, "right": 40, "bottom": 50, "left": 40},
            "content": {
                "header": {
                    "title": self.ml_system.translate("pdf.certificate.title", lang)
                },
                "gate_info": {
                    "title": self.ml_system.translate("pdf.certificate.gateInfo", lang),
                    "details": {
                        "type": inspection_data["gate"]["type"],
                        "manufacturer": inspection_data["gate"]["manufacturer"],
                        "serial": inspection_data["gate"]["serial_number"],
                        "location": inspection_data["gate"]["location"]
                    }
                },
                "inspection_info": {
                    "title": self.ml_system.translate("pdf.certificate.inspectionInfo", lang),
                    "inspector": inspection_data["inspector"]["name"],
                    "date": self.ml_system.format_date(inspection_data["inspection_date"], lang),
                    "type": inspection_data["inspection_type"],
                    "result": inspection_data["result"]
                },
                "validity": {
                    "title": self.ml_system.translate("pdf.certificate.validity", lang),
                    "valid_until": self.ml_system.format_date(inspection_data["valid_until"], lang)
                }
            }
        }
        
        return template

    def generate_report(self, report_data: Dict[str, Any], lang: SupportedLanguage) -> Dict[str, Any]:
        """Jelent√©s gener√°l√°sa.""" 
        template = {
            "type": "report",
            "language": lang.value,
            "layout": "landscape",
            "margins": {"top": 50, "right": 40, "bottom": 50, "left": 40},
            "content": {
                "header": {
                    "title": self.ml_system.translate("pdf.report.title", lang)
                },
                "period": {
                    "text": self.ml_system.translate("pdf.report.period", lang,
                                                      from_date=self.ml_system.format_date(
                                                          report_data["period"]["from"], lang),
                                                      to_date=self.ml_system.format_date(
                                                          report_data["period"]["to"], lang))
                },
                "summary": {
                    "title": self.ml_system.translate("pdf.report.summary", lang),
                    "data": report_data["summary"]
                },
                "details": {
                    "tables": [
                        {
                            "title": table["title"],
                            "headers": table["headers"],
                            "rows": table["rows"]
                        }
                        for table in report_data["tables"]
                    ]
                },
                "footer": {
                    "generated": self.ml_system.translate("pdf.report.generated", lang,
                                                        date=self.ml_system.format_date(datetime.now(), lang))
                }
            }
        }
        
        return template

class MultilingualUIValidator:
    """T√∂bbnyelv≈± UI lefedetts√©g valid√°tor."""
    
    def __init__(self, multilingual_system: MultilingualSystem):
        self.ml_system = multilingual_system
        self.coverage_requirements = [
            # Navig√°ci√≥
            "navigation.dashboard",
            "navigation.clients", 
            "navigation.sites",
            "navigation.buildings",
            "navigation.gates",
            "navigation.inspections",
            "navigation.workOrders",
            "navigation.reports",
            "navigation.users",
            "navigation.settings",
            
            # √Åltal√°nos UI elemek
            "common.save",
            "common.cancel",
            "common.delete",
            "common.edit",
            "common.create",
            "common.search",
            "common.filter",
            "common.loading",
            "common.error",
            "common.success",
            "common.warning",
            
            # Hiteles√≠t√©s
            "auth.login.title",
            "auth.login.username",
            "auth.login.password",
            "auth.logout",
            
            # Dashboard
            "dashboard.title",
            "dashboard.welcome",
            "dashboard.stats.totalClients",
            "dashboard.stats.totalGates",
            "dashboard.stats.activeInspections",
            
            # Form valid√°ci√≥k
            "forms.validation.required",
            "forms.validation.email",
            "forms.validation.minLength"
        ]
    
    def validate_ui_coverage(self) -> Dict[str, Any]:
        """UI lefedetts√©g valid√°l√°sa."""
        print("\nüéØ TELJES ADMIN UI LEFEDETTS√âG VALID√ÅL√ÅSA")
        print("=" * 60)
        
        results = {}
        total_keys = len(self.coverage_requirements)
        
        for lang in [SupportedLanguage.HU, SupportedLanguage.EN, SupportedLanguage.DE]:
            lang_config = self.ml_system.languages[lang]
            print(f"\n{lang_config.flag} {lang_config.native_name} ({lang.value}):")
            
            missing_keys = []
            present_keys = []
            
            for key in self.coverage_requirements:
                translation = self.ml_system.translate(key, lang)
                if translation == key:  # Nincs ford√≠t√°s
                    missing_keys.append(key)
                    print(f"  ‚ùå {key}: HI√ÅNYZIK")
                else:
                    present_keys.append(key)
                    print(f"  ‚úÖ {key}: '{translation}'")
            
            coverage_percent = (len(present_keys) / total_keys) * 100
            results[lang.value] = {
                "coverage_percent": coverage_percent,
                "present_keys": len(present_keys),
                "missing_keys": len(missing_keys),
                "total_keys": total_keys,
                "missing_list": missing_keys
            }
            
            print(f"  üìä Lefedetts√©g: {len(present_keys)}/{total_keys} ({coverage_percent:.1f}%)")
        
        return results

def demonstrate_multilingual_system():
    """T√∂bbnyelv≈± rendszer demonstr√°ci√≥ja."""
    print("üåç T√ñBBNYELV≈∞ UI √âS DOKUMENTUMOK RENDSZER")
    print("=" * 70)
    
    # Rendszer inicializ√°l√°sa
    ml_system = MultilingualSystem()
    ml_system.load_translations()
    
    # PDF gener√°tor
    pdf_generator = PDFMultilingualGenerator(ml_system)
    
    # UI valid√°tor
    ui_validator = MultilingualUIValidator(ml_system)
    
    print("\nüìã 1. NYELVV√ÅLT√ì DEMONSTR√ÅCI√ìJA")
    print("-" * 40)
    
    for lang in [SupportedLanguage.HU, SupportedLanguage.EN, SupportedLanguage.DE]:
        lang_config = ml_system.languages[lang]
        ml_system.current_language = lang
        
        print(f"\n{lang_config.flag} {lang_config.native_name}:")
        print(f"  Dashboard: {ml_system.translate('navigation.dashboard')}")
        print(f"  Ment√©s/Save: {ml_system.translate('common.save')}")
        print(f"  Bejelentkez√©s/Login: {ml_system.translate('auth.login.title')}")
    
    print("\nüí± 2. D√ÅTUM/P√âNZ FORM√ÅTUM DEMONSTR√ÅCI√ìJA")
    print("-" * 50)
    
    test_date = datetime(2024, 3, 15, 14, 30, 0)
    test_amount = 125450.75
    
    for lang in [SupportedLanguage.HU, SupportedLanguage.EN, SupportedLanguage.DE]:
        lang_config = ml_system.languages[lang]
        print(f"\n{lang_config.flag} {lang_config.native_name}:")
        print(f"  D√°tum: {ml_system.format_date(test_date, lang)}")
        print(f"  P√©nznem: {ml_system.format_currency(test_amount, lang)}")
        print(f"  Sz√°m: {ml_system.format_number(12345.67, lang)}")
    
    print("\nüìÑ 3. PDF T√ñBBNYELV≈∞ DEMONSTR√ÅCI√ìJA")
    print("-" * 40)
    
    # Minta sz√°mla adatok
    invoice_data = {
        "invoice_number": "INV-2024-001",
        "customer_name": "ABC Aut√≥szerviz Kft.",
        "issue_date": datetime(2024, 1, 15),
        "due_date": datetime(2024, 2, 15),
        "items": [
            {
                "description": "Kapu ellen≈ërz√©s",
                "quantity": 1,
                "price": 15000.0,
                "amount": 15000.0
            },
            {
                "description": "Karbantart√°s",
                "quantity": 2,
                "price": 8500.0,
                "amount": 17000.0
            }
        ],
        "total": 32000.0
    }
    
    for lang in [SupportedLanguage.HU, SupportedLanguage.EN, SupportedLanguage.DE]:
        lang_config = ml_system.languages[lang]
        print(f"\n{lang_config.flag} PDF sablon {lang_config.native_name} nyelven:")
        
        invoice_template = pdf_generator.generate_invoice(invoice_data, lang)
        print(f"  üìã T√≠pus: {invoice_template['type']}")
        print(f"  üåç Nyelv: {invoice_template['language']}")
        print(f"  üìÑ C√≠m: {invoice_template['content']['invoice']['title']}")
        print(f"  üí∞ √ñsszesen: {invoice_template['content']['invoice']['total']}")
    
    # Tan√∫s√≠tv√°ny p√©lda
    inspection_data = {
        "gate": {
            "type": "Tol√≥kapu",
            "manufacturer": "CAME",
            "serial_number": "CAM-2024-001",
            "location": "F≈ëbej√°rat"
        },
        "inspector": {
            "name": "Kov√°cs J√°nos",
            "license": "INS-001"
        },
        "inspection_date": datetime(2024, 2, 20),
        "inspection_type": "√âves ellen≈ërz√©s",
        "result": "Megfelel≈ë",
        "valid_until": datetime(2025, 2, 20)
    }
    
    print(f"\nüìú Tan√∫s√≠tv√°ny mint√°k:")
    for lang in [SupportedLanguage.HU, SupportedLanguage.EN]:
        cert_template = pdf_generator.generate_inspection_certificate(inspection_data, lang)
        lang_config = ml_system.languages[lang]
        print(f"  {lang_config.flag} {cert_template['content']['header']['title']} ({lang.value})")
    
    # UI lefedetts√©g valid√°l√°sa
    coverage_results = ui_validator.validate_ui_coverage()
    
    print("\nüéØ 4. TELJES ADMIN UI LEFEDETTS√âG √ñSSZEFOGLAL√ì")
    print("-" * 55)
    
    total_coverage = 0
    lang_count = len(coverage_results)
    
    for lang_code, result in coverage_results.items():
        lang_config = ml_system.languages[SupportedLanguage(lang_code)]
        print(f"{lang_config.flag} {lang_config.native_name}: {result['coverage_percent']:.1f}% "
              f"({result['present_keys']}/{result['total_keys']} kulcs)")
        total_coverage += result['coverage_percent']
    
    avg_coverage = total_coverage / lang_count
    
    print(f"\nüìä √ñSSZES√çTETT LEFEDETTS√âG: {avg_coverage:.1f}%")
    
    print(f"\n‚úÖ TELJES√çTETT K√ñVETELM√âNYEK:")
    print(f"  üåê i18n f√°jlok: {len(ml_system.translations)} nyelv (hu, en, de)")
    print(f"  üìÖ D√°tum form√°tum: Lokaliz√°lt minden nyelvre")
    print(f"  üí± P√©nz form√°tum: Nat√≠v currency minden nyelvre")
    print(f"  üìÑ PDF t√∂bbnyelv≈±: Invoice, Certificate, Report sablonok")
    print(f"  üîÑ Nyelvv√°lt√≥: Implement√°lva flag ikonokkal")
    print(f"  üéØ Admin UI lefedve: {avg_coverage:.1f}% √°tlagos lefedetts√©g")
    
    if avg_coverage >= 95:
        status = "üèÜ KIV√ÅL√ì"
    elif avg_coverage >= 85:
        status = "‚úÖ MEGFELEL≈ê"
    else:
        status = "‚ö†Ô∏è FEJLESZTEND≈ê"
    
    print(f"\nüèÅ √ñSSZES√çTETT ST√ÅTUSZ: {status}")
    
    return {
        "i18n_files_created": True,
        "date_money_format": True,
        "pdf_multilingual": True,
        "language_switcher": True,
        "admin_ui_coverage": avg_coverage,
        "status": status,
        "languages_supported": ["hu", "en", "de"],
        "coverage_results": coverage_results
    }

if __name__ == "__main__":
    results = demonstrate_multilingual_system()
    
    print(f"\nüéâ T√ñBBNYELV≈∞ RENDSZER IMPLEMENT√ÅCI√ìJA BEFEJEZVE!")
    print(f"üìà Eredm√©nyek: {results}")