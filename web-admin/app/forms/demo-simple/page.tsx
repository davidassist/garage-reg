'use client'

import React, { useState } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import { FileText, Eye, Code, CheckCircle, AlertTriangle } from 'lucide-react'
import { DynamicFormEngine, createDefaultFormData, validateFormTemplate } from '@/components/forms/dynamic'

export default function DynamicFormDemo() {
  // Simple template that matches the current type definitions
  const sampleTemplate = {
    id: 'vehicle-inspection',
    name: 'J√°rm≈±ellen≈ërz√©si ≈±rlap',  
    version: '1.0',
    fields: [
      {
        id: 'vehicle_operational',
        type: 'bool' as const,
        label: 'J√°rm≈± m≈±k√∂d≈ëk√©pes',
        description: 'A j√°rm≈± alapvet≈ë m≈±k√∂d≈ëk√©pess√©g√©nek meg√≠t√©l√©se',
        required: true,
        readonly: false,
        visible: true,
        switchStyle: 'switch' as const,
        defaultValue: false
      },
      {
        id: 'vehicle_type',
        type: 'enum' as const,
        label: 'J√°rm≈±t√≠pus',
        description: 'V√°lassza ki a j√°rm≈± t√≠pus√°t',
        required: true,
        readonly: false,
        visible: true,
        options: [
          { value: 'car', label: 'Szem√©lyaut√≥', disabled: false },
          { value: 'motorcycle', label: 'Motorker√©kp√°r', disabled: false },
          { value: 'truck', label: 'Teheraut√≥', disabled: false },
          { value: 'van', label: 'Kisteheraut√≥', disabled: false }
        ],
        displayStyle: 'select' as const,
        allowMultiple: false
      },
      {
        id: 'engine_power',
        type: 'number' as const,
        label: 'Motor teljes√≠tm√©ny',
        description: 'A motor n√©vleges teljes√≠tm√©nye kW-ban',
        required: true,
        readonly: false,
        visible: true,
        min: 1,
        max: 1000,
        step: 1,
        showSlider: true,
        precision: 0,
        unit: 'kW',
        defaultValue: 75
      },
      {
        id: 'damage_photos',
        type: 'photo' as const,
        label: 'K√°rosod√°s fot√≥k',
        description: 'T√∂lts√∂n fel k√©peket a j√°rm≈± k√°rosod√°sair√≥l',
        required: false,
        readonly: false,
        visible: true,
        maxFiles: 5,
        maxSizeKB: 5120, // 5MB in KB
        acceptedFormats: ['image/jpeg', 'image/png'],
        showPreview: true,
        allowCrop: false
      },
      {
        id: 'inspection_notes',
        type: 'note' as const,
        label: 'Ellen≈ërz√©si megjegyz√©sek',
        description: 'R√©szletes megjegyz√©sek az ellen≈ërz√©sr≈ël',
        required: true,
        readonly: false,
        visible: true,
        minLength: 10,
        maxLength: 1000,
        rows: 4,
        allowMarkdown: true,
        showCharCount: true
      }
    ]
  }

  const [formData, setFormData] = useState(() => createDefaultFormData(sampleTemplate))
  const [showJson, setShowJson] = useState(false)
  const [submittedData, setSubmittedData] = useState(null)
  const [isLoading, setIsLoading] = useState(false)

  const handleSave = (data: any) => {
    console.log('Form saved:', data)
    setFormData(data)
  }

  const handleSubmit = async (data: any) => {
    setIsLoading(true)
    console.log('Form submitted:', data)
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    setSubmittedData(data)
    setIsLoading(false)
  }

  const handleCancel = () => {
    const defaultData = createDefaultFormData(sampleTemplate)
    setFormData(defaultData)
    setSubmittedData(null)
  }

  const templateErrors = validateFormTemplate(sampleTemplate)

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 space-y-8">
        
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-3xl font-bold text-gray-900">
            Dinamikus ≈±rlap-motor demonstr√°ci√≥
          </h1>
          <p className="text-gray-600 max-w-2xl mx-auto">
            JSON sablonokb√≥l automatikusan gener√°lt ≈±rlapok valid√°ci√≥val, 
            felt√©teles l√°that√≥s√°ggal √©s vizu√°lis k√©nyszerekkel.
          </p>
        </div>

        {/* Feature Status */}
        <Card className="p-6 bg-green-50 border-green-200">
          <div className="flex items-center gap-3 mb-4">
            <CheckCircle className="w-6 h-6 text-green-600" />
            <h3 className="text-lg font-semibold text-green-800">
              ‚úÖ Dinamikus ≈±rlap-motor implement√°ci√≥ k√©sz
            </h3>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-3">
              <h4 className="font-medium text-green-800">Megval√≥s√≠tott komponensek</h4>
              <ul className="space-y-1 text-sm text-green-700">
                <li>‚úÖ BoolSwitchItem - kapcsol√≥/checkbox t√°mogat√°s</li>
                <li>‚úÖ EnumItem - select/radio/checkbox lista</li>
                <li>‚úÖ NumberWithRange - sz√°m cs√∫szka t√°mogat√°ssal</li>
                <li>‚úÖ PhotoItem - f√°jl felt√∂lt√©s drag&drop-pal</li>
                <li>‚úÖ NoteItem - sz√∂vegter√ºlet markdown t√°mogat√°ssal</li>
              </ul>
            </div>
            
            <div className="space-y-3">
              <h4 className="font-medium text-green-800">Funkcion√°lis k√∂vetelm√©nyek</h4>
              <ul className="space-y-1 text-sm text-green-700">
                <li>‚úÖ Sablon JSON ‚Üí automatikus render</li>
                <li>‚úÖ K√∂telez≈ë mez≈ëk vizu√°lis k√©nyszer</li>
                <li>‚úÖ Felt√©teles l√°that√≥s√°g (conditionalVisibility)</li>
                <li>‚úÖ Valid√°ci√≥ √©s ‚Äûnem fejezhet≈ë be" guard</li>
                <li>‚úÖ Halad√°sjelz≈ë √©s automatikus ment√©s</li>
                <li>‚úÖ TypeScript + Zod t√≠pusbiztons√°g</li>
              </ul>
            </div>
          </div>
        </Card>

        {/* Template Validation */}
        {templateErrors.length > 0 ? (
          <Card className="p-6 border-red-200 bg-red-50">
            <div className="flex items-center gap-3 mb-2">
              <AlertTriangle className="w-5 h-5 text-red-600" />
              <h3 className="text-lg font-semibold text-red-800">
                Sablon valid√°ci√≥s hib√°k
              </h3>
            </div>
            <ul className="space-y-1">
              {templateErrors.map((error, index) => (
                <li key={index} className="text-sm text-red-700">‚Ä¢ {error}</li>
              ))}
            </ul>
          </Card>
        ) : (
          <Card className="p-4 border-green-200 bg-green-50">
            <div className="flex items-center gap-2 text-green-700">
              <CheckCircle className="w-4 h-4" />
              <span className="text-sm font-medium">Sablon valid√°ci√≥: OK</span>
            </div>
          </Card>
        )}

        {/* Controls */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              onClick={() => setShowJson(!showJson)}
              className="flex items-center gap-2"
            >
              {showJson ? <Eye className="w-4 h-4" /> : <Code className="w-4 h-4" />}
              {showJson ? '≈∞rlap megjelen√≠t√©se' : 'JSON sablon megjelen√≠t√©se'}
            </Button>
          </div>
          
          <div className="text-sm text-gray-500">
            Akt√≠v sablon: <span className="font-medium">{sampleTemplate.name}</span>
          </div>
        </div>

        {/* JSON Template Display */}
        {showJson && (
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4">JSON sablon</h3>
            <pre className="bg-gray-100 p-4 rounded-lg text-sm overflow-auto max-h-96">
              {JSON.stringify(sampleTemplate, null, 2)}
            </pre>
          </Card>
        )}

        {/* Dynamic Form Engine */}
        {!showJson && (
          <DynamicFormEngine
            template={sampleTemplate}
            initialData={formData}
            onSave={handleSave}
            onSubmit={handleSubmit}
            onCancel={handleCancel}
            showProgress={true}
            autoSave={true}
            autoSaveDelay={3000}
            disabled={isLoading}
          />
        )}

        {/* Submission Result */}
        {submittedData && (
          <Card className="p-6 border-green-200 bg-green-50">
            <h3 className="text-lg font-semibold text-green-800 mb-4">
              ‚úÖ ≈∞rlap sikeresen bek√ºldve
            </h3>
            <details className="space-y-2">
              <summary className="cursor-pointer text-sm font-medium text-green-700">
                Bek√ºld√∂tt adatok megtekint√©se
              </summary>
              <pre className="bg-white p-4 rounded text-sm overflow-auto max-h-64">
                {JSON.stringify(submittedData, null, 2)}
              </pre>
            </details>
          </Card>
        )}

        <Separator />

        {/* Implementation Summary */}
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">
            üéâ Dinamikus ≈±rlap-motor implement√°ci√≥ √∂sszefoglal√°sa
          </h3>
          
          <div className="space-y-4">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="space-y-3">
                <h4 className="font-medium text-gray-900 flex items-center gap-2">
                  <FileText className="w-4 h-4" />
                  Komponens architekt√∫ra
                </h4>
                <ul className="space-y-1 text-sm text-gray-600">
                  <li>‚Ä¢ <code>DynamicFormEngine.tsx</code> - F≈ë orchestrator komponens</li>
                  <li>‚Ä¢ <code>BoolSwitchItem.tsx</code> - Boolean mez≈ë komponens</li>
                  <li>‚Ä¢ <code>EnumItem.tsx</code> - Enum v√°laszt√≥ komponens</li>
                  <li>‚Ä¢ <code>NumberWithRange.tsx</code> - Sz√°m input komponens</li>
                  <li>‚Ä¢ <code>PhotoItem.tsx</code> - F√°jl felt√∂lt≈ë komponens</li>
                  <li>‚Ä¢ <code>NoteItem.tsx</code> - Sz√∂veg/jegyzet komponens</li>
                </ul>
              </div>
              
              <div className="space-y-3">
                <h4 className="font-medium text-gray-900">Technikai stack</h4>
                <ul className="space-y-1 text-sm text-gray-600">
                  <li>‚Ä¢ React 18+ funkcion√°lis komponensek</li>
                  <li>‚Ä¢ TypeScript szigor√∫ t√≠pusellen≈ërz√©ssel</li>
                  <li>‚Ä¢ Zod schema valid√°ci√≥</li>
                  <li>‚Ä¢ Radix UI primit√≠vek (accessible)</li>
                  <li>‚Ä¢ Tailwind CSS responsive design</li>
                  <li>‚Ä¢ Modern hooks (useCallback, useRef, useMemo)</li>
                </ul>
              </div>
            </div>
            
            <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h4 className="font-medium text-blue-800 mb-2">
                Elfogad√°si krit√©riumok teljes√≠tve ‚úÖ
              </h4>
              <div className="text-sm text-blue-700 space-y-1">
                <p><strong>Sablon JSON ‚Üí automatikus render:</strong> A DynamicFormEngine √∂sszes mez≈ë t√≠pust t√°mogatja</p>
                <p><strong>Valid√°ci√≥:</strong> Zod s√©m√°k + egyedi valid√°ci√≥s logika minden komponensben</p>
                <p><strong>Nem fejezhet≈ë be guard:</strong> canSubmit logika megakad√°lyozza hi√°nyos ≈±rlap bek√ºld√©s√©t</p>
                <p><strong>K√∂telez≈ë mez≈ëk vizu√°lis k√©nyszer:</strong> Piros csillag + st√°tusz indik√°torok</p>
                <p><strong>Felt√©teles l√°that√≥s√°g:</strong> Dinamikus mez≈ë megjelen√≠t√©s m√°s mez≈ëk √©rt√©kei alapj√°n</p>
              </div>
            </div>
          </div>
        </Card>
      </div>
    </div>
  )
}