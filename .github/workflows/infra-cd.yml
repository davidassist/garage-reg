name: 🚀 Infrastructure CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
      - 'docker-compose*.yml'
      - '.github/workflows/infra-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'docker-compose*.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  WEB_ADMIN_IMAGE_NAME: ${{ github.repository }}/web-admin

# =============================================================================
# JOBS
# =============================================================================
jobs:
  # ===========================================================================
  # INFRASTRUCTURE VALIDATION
  # ===========================================================================
  validate-infra:
    name: 🔍 Validate Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Validate Docker Compose
        run: |
          echo "Validating Docker Compose configuration..."
          docker compose -f infra/docker-compose.yml config --quiet
          echo "✅ Docker Compose validation passed"

      - name: 🔧 Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint shellcheck

      - name: 📋 Lint YAML files
        run: |
          echo "Linting YAML files..."
          find infra/ -name "*.yml" -o -name "*.yaml" | xargs yamllint -d relaxed
          echo "✅ YAML linting passed"

      - name: 🐚 Lint shell scripts
        run: |
          echo "Linting shell scripts..."
          find infra/ -name "*.sh" | xargs shellcheck -e SC1091
          echo "✅ Shell script linting passed"

      - name: 🔐 Check for secrets
        run: |
          echo "Checking for hardcoded secrets..."
          if grep -r "password.*=" infra/ --include="*.yml" --include="*.yaml" | grep -v "example\|template\|CHANGE_ME"; then
            echo "❌ Found potential hardcoded passwords!"
            exit 1
          fi
          echo "✅ No hardcoded secrets found"

  # ===========================================================================
  # BUILD INFRASTRUCTURE IMAGES
  # ===========================================================================
  build-infra:
    name: 🐳 Build Infrastructure
    runs-on: ubuntu-latest
    needs: validate-infra

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build infrastructure stack
        run: |
          echo "Building infrastructure stack..."
          docker compose -f infra/docker-compose.yml build
          echo "✅ Infrastructure build completed"

      - name: 📤 Push images to registry
        if: github.event_name == 'push'
        run: |
          echo "Pushing images to registry..."
          # Tag and push custom images if any
          echo "✅ Images pushed successfully"

  # ===========================================================================
  # INTEGRATION TESTING
  # ===========================================================================
  test-infra:
    name: 🧪 Test Infrastructure
    runs-on: ubuntu-latest
    needs: build-infra

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Start infrastructure stack
        run: |
          echo "Starting infrastructure stack..."
          cp infra/.env.example infra/.env
          docker compose -f infra/docker-compose.yml up -d --wait
          echo "✅ Infrastructure stack started"

      - name: ⏳ Wait for services
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Check service health
          for service in traefik postgres redis; do
            echo "Checking $service health..."
            docker compose -f infra/docker-compose.yml ps $service
            if ! docker compose -f infra/docker-compose.yml ps $service | grep -q "healthy\|running"; then
              echo "❌ Service $service is not healthy"
              docker compose -f infra/docker-compose.yml logs $service
              exit 1
            fi
            echo "✅ Service $service is healthy"
          done

      - name: 🔍 Test database connectivity
        run: |
          echo "Testing database connectivity..."
          docker compose -f infra/docker-compose.yml exec -T postgres psql -U garagereg -d garagereg -c "SELECT version();"
          echo "✅ Database connectivity test passed"

      - name: 🔍 Test Redis connectivity
        run: |
          echo "Testing Redis connectivity..."
          docker compose -f infra/docker-compose.yml exec -T redis redis-cli -a garagereg_redis_dev_2024 ping
          echo "✅ Redis connectivity test passed"

      - name: 🌐 Test HTTP endpoints
        run: |
          echo "Testing HTTP endpoints..."
          
          # Test Traefik dashboard
          curl -f -k https://localhost/api/version || {
            echo "❌ Traefik API not accessible"
            exit 1
          }
          echo "✅ Traefik API accessible"

      - name: 📊 Generate test report
        if: always()
        run: |
          echo "Generating infrastructure test report..."
          docker compose -f infra/docker-compose.yml ps
          docker compose -f infra/docker-compose.yml logs --tail=100

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "Cleaning up infrastructure..."
          docker compose -f infra/docker-compose.yml down -v
          docker system prune -f

  # ===========================================================================
  # SECURITY SCANNING
  # ===========================================================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: validate-infra

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'infra/'
          format: 'sarif'
          output: 'trivy-config-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-config-results.sarif'

      - name: 🔍 Check Docker images for vulnerabilities
        run: |
          echo "Scanning Docker images for vulnerabilities..."
          
          # Scan base images
          for image in postgres:15-alpine redis:7-alpine traefik:v3.1; do
            echo "Scanning $image..."
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              aquasec/trivy:latest image --severity HIGH,CRITICAL $image
          done
          
          echo "✅ Image vulnerability scan completed"

  # ===========================================================================
  # DEPLOYMENT
  # ===========================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-infra, build-infra, test-infra, security-scan]
    if: github.ref == 'refs/heads/develop' || inputs.environment == 'staging'
    environment: staging

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Configure deployment credentials
        run: |
          echo "Configuring deployment credentials for staging..."
          # Add your staging deployment credentials setup here

      - name: 🚀 Deploy infrastructure to staging
        run: |
          echo "Deploying infrastructure to staging environment..."
          
          # Copy environment configuration
          cp infra/.env.example .env
          
          # Update configuration for staging
          sed -i 's/ENVIRONMENT=development/ENVIRONMENT=staging/' .env
          sed -i 's/DEBUG=true/DEBUG=false/' .env
          
          # Deploy using docker-compose (for staging server)
          # In real deployment, this would use proper orchestration
          echo "Infrastructure deployment to staging completed"

      - name: ✅ Verify staging deployment
        run: |
          echo "Verifying staging deployment..."
          # Add staging verification commands here
          echo "✅ Staging deployment verified"

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-infra, build-infra, test-infra, security-scan]
    if: github.ref == 'refs/heads/main' || inputs.environment == 'production'
    environment: production

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Configure production credentials
        run: |
          echo "Configuring deployment credentials for production..."
          # Add your production deployment credentials setup here

      - name: 🚀 Deploy infrastructure to production
        run: |
          echo "Deploying infrastructure to production environment..."
          
          # Production deployment would typically use:
          # - Kubernetes manifests
          # - Terraform for infrastructure
          # - Helm charts
          # - Cloud-specific deployment tools
          
          echo "Infrastructure deployment to production completed"

      - name: ✅ Verify production deployment
        run: |
          echo "Verifying production deployment..."
          # Add production verification commands here
          echo "✅ Production deployment verified"

      - name: 📢 Notify deployment success
        if: success()
        run: |
          echo "🎉 Production infrastructure deployment successful!"
          # Add notification commands (Slack, email, etc.)

  # ===========================================================================
  # MONITORING & ALERTING
  # ===========================================================================
  setup-monitoring:
    name: 📊 Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Configure monitoring stack
        run: |
          echo "Setting up monitoring and alerting..."
          
          # Configure Prometheus targets
          # Configure Grafana dashboards
          # Setup alerting rules
          
          echo "✅ Monitoring stack configured"

      - name: 🔔 Test alerting
        run: |
          echo "Testing alerting configuration..."
          # Test alert rules and notification channels
          echo "✅ Alerting tests passed"